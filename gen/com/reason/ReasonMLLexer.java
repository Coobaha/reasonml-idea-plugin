/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.reason;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.reason.psi.ReasonMLTypes.*;
import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ReasonML.flex</tt>
 */
public class ReasonMLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\76\1\1\1\100\1\3\1\2\22\0\1\76\1\0\1\50\1\70\3\0\1\6\1\62\1\63\1\52"+
    "\1\74\1\57\1\27\1\24\1\51\1\11\1\23\2\77\4\20\2\7\1\53\1\60\1\72\1\54\1\55"+
    "\1\71\1\56\1\15\1\22\2\15\1\26\1\15\7\5\1\46\1\17\1\31\2\5\1\47\4\5\1\13\2"+
    "\5\1\66\1\75\1\67\1\73\1\10\1\0\1\14\1\21\1\40\1\33\1\25\1\43\2\4\1\37\2\4"+
    "\1\35\1\32\1\36\1\16\1\30\1\4\1\44\1\45\1\41\1\34\2\4\1\12\1\42\1\4\1\64\1"+
    "\61\1\65\7\0\1\100\242\0\2\100\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\4\1\10\1\4\1\11\6\4\2\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\2\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\2\1\37\3\36\1\7"+
    "\1\40\1\0\2\7\1\0\3\4\1\41\5\4\1\42"+
    "\4\4\2\5\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\2\0\1\51\1\52\1\0\1\36\1\0\3\36"+
    "\1\53\1\54\2\40\1\0\3\7\6\4\1\55\5\4"+
    "\1\56\2\5\1\57\1\60\4\0\1\40\1\7\1\61"+
    "\2\4\1\62\1\4\1\63\1\64\1\4\1\65\1\66"+
    "\1\4\1\67\1\70\1\71\1\0\1\40\4\4\1\72"+
    "\1\73\1\4\1\74\2\4\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0145\0\u0249\0\u028a\0\u02cb\0\u0145\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0145\0\u0596\0\u05d7\0\u0618\0\u0659\0\u0145\0\u069a"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u06db\0\u0145\0\u071c\0\u0145\0\u075d"+
    "\0\u0145\0\u079e\0\u07df\0\u0820\0\u0145\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0145\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u01c7\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0d34"+
    "\0\u0145\0\u0d75\0\u0db6\0\u0145\0\u0145\0\u075d\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0145\0\u0145\0\u0145\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u01c7\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u01c7"+
    "\0\u134c\0\u138d\0\u0145\0\u0145\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u08a2\0\u01c7\0\u1513\0\u1554\0\u01c7\0\u1595\0\u01c7"+
    "\0\u01c7\0\u15d6\0\u01c7\0\u01c7\0\u1617\0\u0208\0\u0208\0\u0145"+
    "\0\u1658\0\u08a2\0\u1699\0\u16da\0\u171b\0\u175c\0\u01c7\0\u01c7"+
    "\0\u179d\0\u01c7\0\u17de\0\u181f\0\u01c7\0\u01c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\101\6\102\7\3\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\15\1\11\1\12\1\11\1\12\1\16\1\12\1\14"+
    "\1\11\1\12\1\14\1\17\1\20\1\12\1\21\1\11"+
    "\1\12\1\22\1\11\1\23\1\24\1\11\1\25\1\11"+
    "\1\26\1\11\1\27\2\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\7\1\10\1\14\1\7\2\57"+
    "\1\60\1\7\44\57\1\61\24\57\1\62\2\57\1\7"+
    "\2\57\1\60\1\7\45\57\1\63\1\64\25\57\1\7"+
    "\102\0\3\10\72\0\1\10\6\0\20\11\1\0\2\11"+
    "\1\0\20\11\27\0\1\11\5\0\20\12\1\0\2\12"+
    "\1\0\20\12\27\0\1\12\5\0\2\65\1\0\3\14"+
    "\2\65\2\0\2\65\1\14\2\0\1\14\1\66\2\67"+
    "\1\0\3\65\1\0\4\65\1\0\2\65\1\0\4\65"+
    "\27\0\1\14\5\0\2\65\1\0\3\14\2\70\2\0"+
    "\2\71\1\14\2\72\1\14\1\66\2\67\1\0\3\65"+
    "\1\0\4\65\1\0\2\65\1\0\4\65\27\0\1\14"+
    "\5\0\20\11\1\0\2\11\1\0\1\73\17\11\27\0"+
    "\1\11\5\0\6\11\1\74\11\11\1\0\2\11\1\0"+
    "\5\11\1\75\12\11\27\0\1\11\25\0\1\76\60\0"+
    "\12\11\1\77\5\11\1\0\2\11\1\0\20\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\6\11\1\100"+
    "\11\11\27\0\1\11\5\0\20\11\1\0\1\101\1\11"+
    "\1\0\7\11\1\102\10\11\27\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\6\11\1\103\4\11\1\104\4\11"+
    "\27\0\1\11\5\0\20\11\1\0\2\11\1\0\12\11"+
    "\1\105\1\11\1\106\3\11\27\0\1\11\5\0\10\11"+
    "\1\107\7\11\1\0\2\11\1\0\4\11\1\110\13\11"+
    "\27\0\1\11\5\0\12\12\1\111\5\12\1\0\2\12"+
    "\1\0\20\12\27\0\1\12\5\0\12\12\1\112\5\12"+
    "\1\0\2\12\1\0\20\12\27\0\1\12\25\0\1\113"+
    "\25\0\1\114\2\0\1\115\47\0\1\116\127\0\1\117"+
    "\101\0\1\120\1\121\44\0\1\122\34\0\1\123\73\0"+
    "\1\124\53\0\1\125\55\0\1\57\1\126\76\0\1\57"+
    "\1\127\1\130\1\0\3\57\1\131\1\57\1\131\1\132"+
    "\3\57\1\133\1\57\1\131\2\57\1\131\53\57\1\131"+
    "\53\0\1\134\77\0\1\135\33\0\2\136\1\0\3\66"+
    "\2\136\2\0\2\136\1\66\2\0\1\66\1\0\2\67"+
    "\1\0\3\136\1\0\4\136\1\0\2\136\1\0\4\136"+
    "\27\0\1\66\10\0\1\137\1\0\1\137\6\0\1\137"+
    "\2\0\1\137\3\0\1\140\44\0\1\140\2\0\1\137"+
    "\10\0\1\141\1\0\1\141\2\0\2\141\2\0\4\141"+
    "\1\0\2\141\4\0\1\141\4\0\1\141\2\0\1\141"+
    "\33\0\1\141\12\0\1\142\6\0\1\142\2\0\1\142"+
    "\53\0\1\142\12\0\1\143\11\0\1\143\61\0\20\11"+
    "\1\0\1\144\1\11\1\0\11\11\1\145\6\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\11\11\1\146"+
    "\6\11\27\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\15\11\1\147\2\11\27\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\3\11\1\150\14\11\27\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\7\11\1\151\10\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\11\11\1\152"+
    "\6\11\27\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\15\11\1\153\2\11\27\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\10\11\1\154\7\11\27\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\1\155\17\11\27\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\4\11\1\156\13\11"+
    "\27\0\1\11\5\0\20\11\1\0\2\11\1\0\5\11"+
    "\1\157\12\11\27\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\6\11\1\160\11\11\27\0\1\11\5\0\20\12"+
    "\1\0\2\12\1\0\6\12\1\161\11\12\27\0\1\12"+
    "\5\0\20\12\1\0\2\12\1\0\2\12\1\162\15\12"+
    "\27\0\1\12\55\0\1\163\71\0\1\164\54\0\1\165"+
    "\155\0\1\127\3\0\1\127\1\130\105\0\1\166\1\0"+
    "\1\166\6\0\1\166\2\0\1\166\53\0\1\166\10\0"+
    "\1\167\1\0\1\167\2\0\2\167\2\0\4\167\1\0"+
    "\2\167\4\0\1\167\4\0\1\167\2\0\1\167\33\0"+
    "\1\167\12\0\1\170\11\0\1\170\53\0\1\170\5\0"+
    "\2\136\1\0\3\137\2\136\2\0\2\136\1\137\2\0"+
    "\1\137\4\0\3\136\1\0\4\136\1\0\2\136\1\0"+
    "\4\136\27\0\1\137\10\0\1\137\1\0\1\137\6\0"+
    "\1\137\2\0\1\137\53\0\1\137\5\0\2\65\1\0"+
    "\3\141\2\65\2\141\2\65\4\141\1\171\2\141\1\0"+
    "\2\172\1\65\1\141\4\65\1\141\2\65\1\141\4\65"+
    "\27\0\1\141\5\0\2\65\2\0\2\142\2\65\2\0"+
    "\2\65\1\142\2\0\1\142\4\0\3\65\1\0\4\65"+
    "\1\0\2\65\1\0\4\65\27\0\1\142\5\0\2\65"+
    "\2\0\2\143\2\65\2\0\2\65\3\0\1\143\4\0"+
    "\3\65\1\0\4\65\1\0\2\65\1\0\4\65\35\0"+
    "\20\11\1\0\2\11\1\0\6\11\1\173\11\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\7\11\1\174"+
    "\10\11\27\0\1\11\5\0\20\11\1\0\1\175\1\11"+
    "\1\0\20\11\27\0\1\11\5\0\20\11\1\0\1\176"+
    "\1\11\1\0\20\11\27\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\4\11\1\177\13\11\27\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\11\11\1\200\6\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\11\11\1\201"+
    "\6\11\27\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\5\11\1\202\12\11\27\0\1\11\5\0\20\11\1\0"+
    "\1\203\1\11\1\0\20\11\27\0\1\11\5\0\20\11"+
    "\1\0\1\204\1\11\1\0\20\11\27\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\15\11\1\205\2\11\27\0"+
    "\1\11\5\0\20\12\1\0\1\206\1\12\1\0\20\12"+
    "\27\0\1\12\5\0\20\12\1\0\1\207\1\12\1\0"+
    "\20\12\27\0\1\12\46\0\1\210\42\0\1\57\1\0"+
    "\1\57\6\0\1\57\2\0\1\57\53\0\1\57\10\0"+
    "\1\57\1\0\1\57\2\0\2\57\2\0\4\57\1\0"+
    "\2\57\4\0\1\57\4\0\1\57\2\0\1\57\33\0"+
    "\1\57\12\0\1\211\6\0\1\211\2\0\1\211\53\0"+
    "\1\211\5\0\2\136\1\0\3\171\2\136\2\171\2\136"+
    "\4\171\1\0\2\171\1\0\2\212\1\136\1\171\4\136"+
    "\1\171\2\136\1\171\4\136\27\0\1\171\5\0\12\11"+
    "\1\213\5\11\1\0\2\11\1\0\20\11\27\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\14\11\1\214\3\11"+
    "\27\0\1\11\5\0\20\11\1\0\2\11\1\0\5\11"+
    "\1\215\12\11\27\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\4\11\1\216\13\11\27\0\1\11\5\0\20\11"+
    "\1\0\1\217\1\11\1\0\20\11\27\0\1\11\12\0"+
    "\1\57\6\0\1\57\2\0\1\57\53\0\1\57\5\0"+
    "\20\11\1\0\2\11\1\0\6\11\1\220\11\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\6\11\1\221"+
    "\11\11\27\0\1\11\5\0\20\11\1\0\1\222\1\11"+
    "\1\0\20\11\27\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\3\11\1\223\14\11\27\0\1\11\5\0\10\11"+
    "\1\224\7\11\1\0\2\11\1\0\20\11\27\0\1\11"+
    "\5\0\20\11\1\0\1\225\1\11\1\0\20\11\27\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\5\11\1\226"+
    "\12\11\27\0\1\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\1\11\3\1\1\11\12\1\1\11"+
    "\4\1\1\11\1\1\13\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\0\2\1\1\0"+
    "\3\1\1\11\14\1\5\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\1\1\0\3\1\3\11\1\1\1\0\22\1"+
    "\2\11\4\0\17\1\1\11\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReasonMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return STRING;
            }
            case 151: break;
            case IN_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return COMMENT;
            }
            case 152: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            }
          case 63: break;
          case 2: 
            { return BAD_CHARACTER;
            }
          case 64: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 65: break;
          case 4: 
            { return LIDENT;
            }
          case 66: break;
          case 5: 
            { return UIDENT;
            }
          case 67: break;
          case 6: 
            { return QUOTE;
            }
          case 68: break;
          case 7: 
            { return INT;
            }
          case 69: break;
          case 8: 
            { return DOT;
            }
          case 70: break;
          case 9: 
            { return MINUS;
            }
          case 71: break;
          case 10: 
            { yybegin(IN_STRING); tokenStart();
            }
          case 72: break;
          case 11: 
            { return SLASH;
            }
          case 73: break;
          case 12: 
            { return STAR;
            }
          case 74: break;
          case 13: 
            { return COLON;
            }
          case 75: break;
          case 14: 
            { return EQUAL;
            }
          case 76: break;
          case 15: 
            { return GT;
            }
          case 77: break;
          case 16: 
            { return COMMA;
            }
          case 78: break;
          case 17: 
            { return SEMI;
            }
          case 79: break;
          case 18: 
            { return PIPE;
            }
          case 80: break;
          case 19: 
            { return LPAREN;
            }
          case 81: break;
          case 20: 
            { return RPAREN;
            }
          case 82: break;
          case 21: 
            { return LBRACE;
            }
          case 83: break;
          case 22: 
            { return RBRACE;
            }
          case 84: break;
          case 23: 
            { return LBRACKET;
            }
          case 85: break;
          case 24: 
            { return RBRACKET;
            }
          case 86: break;
          case 25: 
            { return SHARP;
            }
          case 87: break;
          case 26: 
            { return QUESTION_MARK;
            }
          case 88: break;
          case 27: 
            { return LT;
            }
          case 89: break;
          case 28: 
            { return CARRET;
            }
          case 90: break;
          case 29: 
            { return PLUS;
            }
          case 91: break;
          case 30: 
            { 
            }
          case 92: break;
          case 31: 
            { yybegin(INITIAL); tokenEnd(); return STRING;
            }
          case 93: break;
          case 32: 
            { return FLOAT;
            }
          case 94: break;
          case 33: 
            { return MINUSDOT;
            }
          case 95: break;
          case 34: 
            { return IF;
            }
          case 96: break;
          case 35: 
            { return SLASHDOT;
            }
          case 97: break;
          case 36: 
            { yybegin(IN_COMMENT); commentDepth = 1; tokenStart();
            }
          case 98: break;
          case 37: 
            { return AUTO_CLOSE_TAG;
            }
          case 99: break;
          case 38: 
            { return STARDOT;
            }
          case 100: break;
          case 39: 
            { return SHORTCUT;
            }
          case 101: break;
          case 40: 
            { return ARROW;
            }
          case 102: break;
          case 41: 
            { return CLOSE_TAG;
            }
          case 103: break;
          case 42: 
            { return PLUSDOT;
            }
          case 104: break;
          case 43: 
            { commentDepth += 1;
            }
          case 105: break;
          case 44: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return COMMENT; }
            }
          case 106: break;
          case 45: 
            { return LET;
            }
          case 107: break;
          case 46: 
            { return FUN;
            }
          case 108: break;
          case 47: 
            { return EQEQEQUAL;
            }
          case 109: break;
          case 48: 
            { return BS;
            }
          case 110: break;
          case 49: 
            { return OPEN;
            }
          case 111: break;
          case 50: 
            { return ELSE;
            }
          case 112: break;
          case 51: 
            { return UNIT;
            }
          case 113: break;
          case 52: 
            { return LIST;
            }
          case 114: break;
          case 53: 
            { return TYPE;
            }
          case 115: break;
          case 54: 
            { return TRUE;
            }
          case 116: break;
          case 55: 
            { return NONE;
            }
          case 117: break;
          case 56: 
            { return SOME;
            }
          case 118: break;
          case 57: 
            { return BBS;
            }
          case 119: break;
          case 58: 
            { return FALSE;
            }
          case 120: break;
          case 59: 
            { return OPTION;
            }
          case 121: break;
          case 60: 
            { return MODULE;
            }
          case 122: break;
          case 61: 
            { return INCLUDE;
            }
          case 123: break;
          case 62: 
            { return EXTERNAL;
            }
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
