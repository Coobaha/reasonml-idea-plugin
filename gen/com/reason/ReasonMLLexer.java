/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.reason;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.reason.psi.ReasonMLTypes.*;
import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ReasonML.flex</tt>
 */
public class ReasonMLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\74\1\1\1\76\1\3\1\2\22\0\1\74\1\0\1\47\1\67\3\0\1\6\1\61\1\62\1\51"+
    "\1\72\1\57\1\27\1\24\1\50\1\11\1\23\2\75\4\20\2\7\1\52\1\60\1\71\1\53\1\54"+
    "\1\70\1\55\1\15\1\22\2\15\1\26\1\15\7\5\1\45\1\17\1\31\2\5\1\46\4\5\1\13\2"+
    "\5\1\65\1\73\1\66\1\0\1\10\1\0\1\14\1\21\1\40\1\33\1\25\1\43\2\4\1\37\2\4"+
    "\1\35\1\32\1\36\1\16\1\30\1\4\1\44\1\56\1\41\1\34\2\4\1\12\1\42\1\4\1\63\1"+
    "\0\1\64\7\0\1\76\242\0\2\76\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\2\6\1\4"+
    "\1\7\6\4\2\5\1\10\1\2\1\11\1\12\1\13"+
    "\1\2\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\2\1\31"+
    "\3\30\1\6\1\32\1\0\2\6\1\0\7\4\2\5"+
    "\1\33\1\34\1\35\1\36\2\0\1\37\1\0\1\30"+
    "\1\0\3\30\1\40\1\41\2\32\1\0\3\6\4\4"+
    "\1\42\2\4\1\43\2\5\1\44\4\0\1\32\1\6"+
    "\1\45\4\4\1\46\1\47\1\50\1\51\1\0\1\32"+
    "\4\4\1\52\1\4\1\53\2\4\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u013b\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u013b\0\u04ec"+
    "\0\u052b\0\u056a\0\u013b\0\u05a9\0\u013b\0\u013b\0\u013b\0\u013b"+
    "\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u05e8\0\u013b"+
    "\0\u013b\0\u0627\0\u013b\0\u0666\0\u06a5\0\u06e4\0\u013b\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u013b\0\u013b\0\u013b"+
    "\0\u013b\0\u0a95\0\u0ad4\0\u013b\0\u0627\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u013b\0\u013b\0\u013b\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u01b9\0\u0e85"+
    "\0\u0ec4\0\u01b9\0\u0f03\0\u0f42\0\u013b\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u0762\0\u01b9\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u01b9\0\u01f8\0\u01f8\0\u013b\0\u11b8\0\u0762\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u01b9\0\u12f3\0\u01b9\0\u1332\0\u1371\0\u01b9"+
    "\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\77\6\100\7\3\10\1\11\1\12\1\7\1\13\1\11"+
    "\1\14\1\11\1\12\1\11\1\12\1\15\1\12\1\13"+
    "\1\11\1\12\1\13\1\16\1\17\1\12\1\7\1\11"+
    "\1\12\1\20\2\11\1\21\1\11\1\22\1\11\1\23"+
    "\1\11\1\24\1\11\1\25\1\26\1\27\1\30\1\7"+
    "\1\31\1\32\1\33\1\34\1\11\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\7\1\10\1\13\1\7\2\51\1\52\1\7"+
    "\43\51\1\53\23\51\1\54\2\51\1\7\2\51\1\52"+
    "\1\7\44\51\1\55\1\56\24\51\1\7\100\0\3\10"+
    "\70\0\1\10\6\0\20\11\1\0\2\11\1\0\17\11"+
    "\7\0\1\11\16\0\1\11\5\0\20\12\1\0\2\12"+
    "\1\0\17\12\7\0\1\12\16\0\1\12\5\0\2\57"+
    "\1\0\3\13\2\57\2\0\2\57\1\13\2\0\1\13"+
    "\1\60\2\61\1\0\3\57\1\0\4\57\1\0\2\57"+
    "\1\0\3\57\7\0\1\57\16\0\1\13\5\0\2\57"+
    "\1\0\3\13\2\62\2\0\2\63\1\13\2\64\1\13"+
    "\1\60\2\61\1\0\3\57\1\0\4\57\1\0\2\57"+
    "\1\0\3\57\7\0\1\57\16\0\1\13\5\0\20\11"+
    "\1\0\2\11\1\0\1\65\16\11\7\0\1\11\16\0"+
    "\1\11\5\0\6\11\1\66\11\11\1\0\2\11\1\0"+
    "\17\11\7\0\1\11\16\0\1\11\5\0\12\11\1\67"+
    "\5\11\1\0\2\11\1\0\17\11\7\0\1\11\16\0"+
    "\1\11\5\0\20\11\1\0\1\70\1\11\1\0\17\11"+
    "\7\0\1\11\16\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\6\11\1\71\10\11\7\0\1\11\16\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\12\11\1\72\4\11"+
    "\7\0\1\11\16\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\4\11\1\73\12\11\7\0\1\11\16\0\1\11"+
    "\5\0\12\12\1\74\5\12\1\0\2\12\1\0\17\12"+
    "\7\0\1\12\16\0\1\12\5\0\12\12\1\75\5\12"+
    "\1\0\2\12\1\0\17\12\7\0\1\12\16\0\1\12"+
    "\52\0\1\76\2\0\1\77\74\0\1\100\100\0\1\101"+
    "\43\0\1\102\33\0\1\103\71\0\1\104\27\0\1\51"+
    "\1\105\74\0\1\51\1\106\1\107\1\0\3\51\1\110"+
    "\1\51\1\110\1\111\3\51\1\112\1\51\1\110\2\51"+
    "\1\110\51\51\1\110\52\0\1\113\75\0\1\114\32\0"+
    "\2\115\1\0\3\60\2\115\2\0\2\115\1\60\2\0"+
    "\1\60\1\0\2\61\1\0\3\115\1\0\4\115\1\0"+
    "\2\115\1\0\3\115\7\0\1\115\16\0\1\60\10\0"+
    "\1\116\1\0\1\116\6\0\1\116\2\0\1\116\3\0"+
    "\1\117\42\0\1\117\2\0\1\116\10\0\1\120\1\0"+
    "\1\120\2\0\2\120\2\0\4\120\1\0\2\120\4\0"+
    "\1\120\4\0\1\120\2\0\1\120\31\0\1\120\12\0"+
    "\1\121\6\0\1\121\2\0\1\121\51\0\1\121\12\0"+
    "\1\122\11\0\1\122\57\0\20\11\1\0\1\123\1\11"+
    "\1\0\11\11\1\124\5\11\7\0\1\11\16\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\11\11\1\125\5\11"+
    "\7\0\1\11\16\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\3\11\1\126\13\11\7\0\1\11\16\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\11\11\1\127\5\11"+
    "\7\0\1\11\16\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\10\11\1\130\6\11\7\0\1\11\16\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\1\131\16\11\7\0"+
    "\1\11\16\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\6\11\1\132\10\11\7\0\1\11\16\0\1\11\5\0"+
    "\20\12\1\0\2\12\1\0\6\12\1\133\10\12\7\0"+
    "\1\12\16\0\1\12\5\0\20\12\1\0\2\12\1\0"+
    "\2\12\1\134\14\12\7\0\1\12\16\0\1\12\57\0"+
    "\1\135\41\0\1\136\151\0\1\106\3\0\1\106\1\107"+
    "\103\0\1\137\1\0\1\137\6\0\1\137\2\0\1\137"+
    "\51\0\1\137\10\0\1\140\1\0\1\140\2\0\2\140"+
    "\2\0\4\140\1\0\2\140\4\0\1\140\4\0\1\140"+
    "\2\0\1\140\31\0\1\140\12\0\1\141\11\0\1\141"+
    "\51\0\1\141\5\0\2\115\1\0\3\116\2\115\2\0"+
    "\2\115\1\116\2\0\1\116\4\0\3\115\1\0\4\115"+
    "\1\0\2\115\1\0\3\115\7\0\1\115\16\0\1\116"+
    "\10\0\1\116\1\0\1\116\6\0\1\116\2\0\1\116"+
    "\51\0\1\116\5\0\2\57\1\0\3\120\2\57\2\120"+
    "\2\57\4\120\1\142\2\120\1\0\2\143\1\57\1\120"+
    "\4\57\1\120\2\57\1\120\3\57\7\0\1\57\16\0"+
    "\1\120\5\0\2\57\2\0\2\121\2\57\2\0\2\57"+
    "\1\121\2\0\1\121\4\0\3\57\1\0\4\57\1\0"+
    "\2\57\1\0\3\57\7\0\1\57\16\0\1\121\5\0"+
    "\2\57\2\0\2\122\2\57\2\0\2\57\3\0\1\122"+
    "\4\0\3\57\1\0\4\57\1\0\2\57\1\0\3\57"+
    "\7\0\1\57\24\0\20\11\1\0\2\11\1\0\6\11"+
    "\1\144\10\11\7\0\1\11\16\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\7\11\1\145\7\11\7\0\1\11"+
    "\16\0\1\11\5\0\20\11\1\0\1\146\1\11\1\0"+
    "\17\11\7\0\1\11\16\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\4\11\1\147\12\11\7\0\1\11\16\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\5\11\1\150"+
    "\11\11\7\0\1\11\16\0\1\11\5\0\20\11\1\0"+
    "\1\151\1\11\1\0\17\11\7\0\1\11\16\0\1\11"+
    "\5\0\20\12\1\0\1\152\1\12\1\0\17\12\7\0"+
    "\1\12\16\0\1\12\5\0\20\12\1\0\1\153\1\12"+
    "\1\0\17\12\7\0\1\12\16\0\1\12\57\0\1\154"+
    "\27\0\1\51\1\0\1\51\6\0\1\51\2\0\1\51"+
    "\51\0\1\51\10\0\1\51\1\0\1\51\2\0\2\51"+
    "\2\0\4\51\1\0\2\51\4\0\1\51\4\0\1\51"+
    "\2\0\1\51\31\0\1\51\12\0\1\155\6\0\1\155"+
    "\2\0\1\155\51\0\1\155\5\0\2\115\1\0\3\142"+
    "\2\115\2\142\2\115\4\142\1\0\2\142\1\0\2\156"+
    "\1\115\1\142\4\115\1\142\2\115\1\142\3\115\7\0"+
    "\1\115\16\0\1\142\5\0\12\11\1\157\5\11\1\0"+
    "\2\11\1\0\17\11\7\0\1\11\16\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\14\11\1\160\2\11\7\0"+
    "\1\11\16\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\5\11\1\161\11\11\7\0\1\11\16\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\4\11\1\162\12\11\7\0"+
    "\1\11\16\0\1\11\12\0\1\51\6\0\1\51\2\0"+
    "\1\51\51\0\1\51\5\0\20\11\1\0\2\11\1\0"+
    "\6\11\1\163\10\11\7\0\1\11\16\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\6\11\1\164\10\11\7\0"+
    "\1\11\16\0\1\11\5\0\20\11\1\0\1\165\1\11"+
    "\1\0\17\11\7\0\1\11\16\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\3\11\1\166\13\11\7\0\1\11"+
    "\16\0\1\11\5\0\10\11\1\167\7\11\1\0\2\11"+
    "\1\0\17\11\7\0\1\11\16\0\1\11\5\0\20\11"+
    "\1\0\1\170\1\11\1\0\17\11\7\0\1\11\16\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\5\11\1\171"+
    "\11\11\7\0\1\11\16\0\1\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\6\1\1\11\10\1\1\11\3\1\1\11"+
    "\1\1\12\11\1\1\2\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\2\1\1\0\11\1\4\11\2\0\1\11"+
    "\1\0\1\1\1\0\3\1\3\11\1\1\1\0\15\1"+
    "\1\11\4\0\12\1\1\11\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReasonMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return STRING;
            }
            case 122: break;
            case IN_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return COMMENT;
            }
            case 123: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            }
          case 46: break;
          case 2: 
            { return BAD_CHARACTER;
            }
          case 47: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 48: break;
          case 4: 
            { return LIDENT;
            }
          case 49: break;
          case 5: 
            { return UIDENT;
            }
          case 50: break;
          case 6: 
            { return INT;
            }
          case 51: break;
          case 7: 
            { return DOT;
            }
          case 52: break;
          case 8: 
            { yybegin(IN_STRING); tokenStart();
            }
          case 53: break;
          case 9: 
            { return COLON;
            }
          case 54: break;
          case 10: 
            { return EQUAL;
            }
          case 55: break;
          case 11: 
            { return GT;
            }
          case 56: break;
          case 12: 
            { return COMMA;
            }
          case 57: break;
          case 13: 
            { return SEMI;
            }
          case 58: break;
          case 14: 
            { return LPAREN;
            }
          case 59: break;
          case 15: 
            { return RPAREN;
            }
          case 60: break;
          case 16: 
            { return LBRACE;
            }
          case 61: break;
          case 17: 
            { return RBRACE;
            }
          case 62: break;
          case 18: 
            { return LBRACKET;
            }
          case 63: break;
          case 19: 
            { return RBRACKET;
            }
          case 64: break;
          case 20: 
            { return SHARP;
            }
          case 65: break;
          case 21: 
            { return QUESTION_MARK;
            }
          case 66: break;
          case 22: 
            { return LT;
            }
          case 67: break;
          case 23: 
            { return PLUS;
            }
          case 68: break;
          case 24: 
            { 
            }
          case 69: break;
          case 25: 
            { yybegin(INITIAL); tokenEnd(); return STRING;
            }
          case 70: break;
          case 26: 
            { return FLOAT;
            }
          case 71: break;
          case 27: 
            { yybegin(IN_COMMENT); commentDepth = 1; tokenStart();
            }
          case 72: break;
          case 28: 
            { return AUTO_CLOSE_TAG;
            }
          case 73: break;
          case 29: 
            { return SHORTCUT;
            }
          case 74: break;
          case 30: 
            { return ARROW;
            }
          case 75: break;
          case 31: 
            { return CLOSE_TAG;
            }
          case 76: break;
          case 32: 
            { commentDepth += 1;
            }
          case 77: break;
          case 33: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return COMMENT; }
            }
          case 78: break;
          case 34: 
            { return LET;
            }
          case 79: break;
          case 35: 
            { return FUN;
            }
          case 80: break;
          case 36: 
            { return BS;
            }
          case 81: break;
          case 37: 
            { return OPEN;
            }
          case 82: break;
          case 38: 
            { return TYPE;
            }
          case 83: break;
          case 39: 
            { return NONE;
            }
          case 84: break;
          case 40: 
            { return SOME;
            }
          case 85: break;
          case 41: 
            { return BBS;
            }
          case 86: break;
          case 42: 
            { return OPTION;
            }
          case 87: break;
          case 43: 
            { return MODULE;
            }
          case 88: break;
          case 44: 
            { return INCLUDE;
            }
          case 89: break;
          case 45: 
            { return EXTERNAL;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
