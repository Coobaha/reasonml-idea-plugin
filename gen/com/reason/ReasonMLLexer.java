/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.reason;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.reason.psi.ReasonMLTypes.*;
import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ReasonML.flex</tt>
 */
public class ReasonMLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\72\1\1\1\74\1\3\1\2\22\0\1\72\1\0\1\47\4\0\1\6\1\61\1\62\1\51\1\70"+
    "\1\57\1\27\1\24\1\50\1\11\1\23\2\73\4\20\2\7\1\52\1\60\1\67\1\53\1\54\1\0"+
    "\1\55\1\15\1\22\2\15\1\26\1\15\7\5\1\45\1\17\1\31\2\5\1\46\4\5\1\13\2\5\1"+
    "\65\1\71\1\66\1\0\1\10\1\0\1\14\1\21\1\40\1\33\1\25\1\43\2\4\1\36\2\4\1\35"+
    "\1\32\1\37\1\16\1\30\1\4\1\44\1\56\1\41\1\34\2\4\1\12\1\42\1\4\1\63\1\0\1"+
    "\64\7\0\1\74\242\0\2\74\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\6\4\2\5\1\10\1\2\1\11\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\2\1\27\3\26\1\6\1\30"+
    "\1\0\2\6\1\0\6\4\2\5\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\26\1\0\3\26\1\36"+
    "\1\37\2\30\1\0\3\6\2\4\1\40\2\4\1\41"+
    "\2\5\4\0\1\30\1\6\3\4\1\42\1\43\1\44"+
    "\1\45\1\0\1\30\4\4\1\46\2\4\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u0131\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0131\0\u0487\0\u04c4"+
    "\0\u0501\0\u0131\0\u053e\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131"+
    "\0\u0131\0\u0131\0\u0131\0\u057b\0\u0131\0\u0131\0\u05b8\0\u0131"+
    "\0\u05f5\0\u0632\0\u066f\0\u0131\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u0131\0\u0131\0\u0131\0\u0131\0\u09c5\0\u0131\0\u05b8"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0131\0\u0131\0\u0131"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u01ab"+
    "\0\u0cde\0\u0d1b\0\u01ab\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u06e9\0\u0f03\0\u0f40\0\u0f7d\0\u01ab\0\u01e8"+
    "\0\u01e8\0\u0131\0\u0fba\0\u06e9\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u01ab\0\u10eb\0\u1128\0\u01ab\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\75\6\76\7\3\10\1\11\1\12\1\7\1\13\1\11"+
    "\1\14\1\11\1\12\1\11\1\12\1\11\1\12\1\13"+
    "\1\11\1\12\1\13\1\15\1\16\1\12\1\7\1\11"+
    "\1\12\1\17\2\11\1\20\1\21\2\11\1\22\1\11"+
    "\1\23\1\11\1\24\1\25\1\26\1\27\1\7\1\30"+
    "\1\31\1\32\1\33\1\11\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\7\1\10"+
    "\1\13\1\7\2\46\1\47\1\7\43\46\1\50\21\46"+
    "\1\51\2\46\1\7\2\46\1\47\1\7\44\46\1\52"+
    "\1\53\22\46\1\7\76\0\3\10\66\0\1\10\6\0"+
    "\20\11\1\0\2\11\1\0\17\11\7\0\1\11\14\0"+
    "\1\11\5\0\20\12\1\0\2\12\1\0\17\12\7\0"+
    "\1\12\14\0\1\12\5\0\2\54\1\0\3\13\2\54"+
    "\2\0\2\54\1\13\2\0\1\13\1\55\2\56\1\0"+
    "\3\54\1\0\4\54\1\0\2\54\1\0\3\54\7\0"+
    "\1\54\14\0\1\13\5\0\2\54\1\0\3\13\2\57"+
    "\2\0\2\60\1\13\2\61\1\13\1\55\2\56\1\0"+
    "\3\54\1\0\4\54\1\0\2\54\1\0\3\54\7\0"+
    "\1\54\14\0\1\13\5\0\6\11\1\62\11\11\1\0"+
    "\2\11\1\0\17\11\7\0\1\11\14\0\1\11\5\0"+
    "\12\11\1\63\5\11\1\0\2\11\1\0\17\11\7\0"+
    "\1\11\14\0\1\11\5\0\20\11\1\0\1\64\1\11"+
    "\1\0\17\11\7\0\1\11\14\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\7\11\1\65\7\11\7\0\1\11"+
    "\14\0\1\11\5\0\20\11\1\0\2\11\1\0\12\11"+
    "\1\66\4\11\7\0\1\11\14\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\4\11\1\67\12\11\7\0\1\11"+
    "\14\0\1\11\5\0\12\12\1\70\5\12\1\0\2\12"+
    "\1\0\17\12\7\0\1\12\14\0\1\12\5\0\12\12"+
    "\1\71\5\12\1\0\2\12\1\0\17\12\7\0\1\12"+
    "\14\0\1\12\52\0\1\72\2\0\1\73\72\0\1\74"+
    "\76\0\1\75\75\0\1\76\67\0\1\77\25\0\1\46"+
    "\1\100\72\0\1\46\1\101\1\102\1\0\3\46\1\103"+
    "\1\46\1\103\1\104\3\46\1\105\1\46\1\103\2\46"+
    "\1\103\47\46\1\103\52\0\1\106\73\0\1\107\30\0"+
    "\2\110\1\0\3\55\2\110\2\0\2\110\1\55\2\0"+
    "\1\55\1\0\2\56\1\0\3\110\1\0\4\110\1\0"+
    "\2\110\1\0\3\110\7\0\1\110\14\0\1\55\10\0"+
    "\1\111\1\0\1\111\6\0\1\111\2\0\1\111\3\0"+
    "\1\112\40\0\1\112\2\0\1\111\10\0\1\113\1\0"+
    "\1\113\2\0\2\113\2\0\4\113\1\0\2\113\4\0"+
    "\1\113\4\0\1\113\2\0\1\113\27\0\1\113\12\0"+
    "\1\114\6\0\1\114\2\0\1\114\47\0\1\114\12\0"+
    "\1\115\11\0\1\115\55\0\20\11\1\0\2\11\1\0"+
    "\11\11\1\116\5\11\7\0\1\11\14\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\3\11\1\117\13\11\7\0"+
    "\1\11\14\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\11\11\1\120\5\11\7\0\1\11\14\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\10\11\1\121\6\11\7\0"+
    "\1\11\14\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\1\122\16\11\7\0\1\11\14\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\7\11\1\123\7\11\7\0\1\11"+
    "\14\0\1\11\5\0\20\12\1\0\2\12\1\0\7\12"+
    "\1\124\7\12\7\0\1\12\14\0\1\12\5\0\20\12"+
    "\1\0\2\12\1\0\2\12\1\125\14\12\7\0\1\12"+
    "\14\0\1\12\22\0\1\126\145\0\1\101\3\0\1\101"+
    "\1\102\101\0\1\127\1\0\1\127\6\0\1\127\2\0"+
    "\1\127\47\0\1\127\10\0\1\130\1\0\1\130\2\0"+
    "\2\130\2\0\4\130\1\0\2\130\4\0\1\130\4\0"+
    "\1\130\2\0\1\130\27\0\1\130\12\0\1\131\11\0"+
    "\1\131\47\0\1\131\5\0\2\110\1\0\3\111\2\110"+
    "\2\0\2\110\1\111\2\0\1\111\4\0\3\110\1\0"+
    "\4\110\1\0\2\110\1\0\3\110\7\0\1\110\14\0"+
    "\1\111\10\0\1\111\1\0\1\111\6\0\1\111\2\0"+
    "\1\111\47\0\1\111\5\0\2\54\1\0\3\113\2\54"+
    "\2\113\2\54\4\113\1\132\2\113\1\0\2\133\1\54"+
    "\1\113\4\54\1\113\2\54\1\113\3\54\7\0\1\54"+
    "\14\0\1\113\5\0\2\54\2\0\2\114\2\54\2\0"+
    "\2\54\1\114\2\0\1\114\4\0\3\54\1\0\4\54"+
    "\1\0\2\54\1\0\3\54\7\0\1\54\14\0\1\114"+
    "\5\0\2\54\2\0\2\115\2\54\2\0\2\54\3\0"+
    "\1\115\4\0\3\54\1\0\4\54\1\0\2\54\1\0"+
    "\3\54\7\0\1\54\22\0\20\11\1\0\1\134\1\11"+
    "\1\0\17\11\7\0\1\11\14\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\4\11\1\135\12\11\7\0\1\11"+
    "\14\0\1\11\5\0\20\11\1\0\2\11\1\0\5\11"+
    "\1\136\11\11\7\0\1\11\14\0\1\11\5\0\20\11"+
    "\1\0\1\137\1\11\1\0\17\11\7\0\1\11\14\0"+
    "\1\11\5\0\20\12\1\0\1\140\1\12\1\0\17\12"+
    "\7\0\1\12\14\0\1\12\5\0\20\12\1\0\1\141"+
    "\1\12\1\0\17\12\7\0\1\12\14\0\1\12\57\0"+
    "\1\142\25\0\1\46\1\0\1\46\6\0\1\46\2\0"+
    "\1\46\47\0\1\46\10\0\1\46\1\0\1\46\2\0"+
    "\2\46\2\0\4\46\1\0\2\46\4\0\1\46\4\0"+
    "\1\46\2\0\1\46\27\0\1\46\12\0\1\143\6\0"+
    "\1\143\2\0\1\143\47\0\1\143\5\0\2\110\1\0"+
    "\3\132\2\110\2\132\2\110\4\132\1\0\2\132\1\0"+
    "\2\144\1\110\1\132\4\110\1\132\2\110\1\132\3\110"+
    "\7\0\1\110\14\0\1\132\5\0\20\11\1\0\2\11"+
    "\1\0\14\11\1\145\2\11\7\0\1\11\14\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\5\11\1\146\11\11"+
    "\7\0\1\11\14\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\4\11\1\147\12\11\7\0\1\11\14\0\1\11"+
    "\12\0\1\46\6\0\1\46\2\0\1\46\47\0\1\46"+
    "\5\0\20\11\1\0\2\11\1\0\7\11\1\150\7\11"+
    "\7\0\1\11\14\0\1\11\5\0\20\11\1\0\1\151"+
    "\1\11\1\0\17\11\7\0\1\11\14\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\3\11\1\152\13\11\7\0"+
    "\1\11\14\0\1\11\5\0\10\11\1\153\7\11\1\0"+
    "\2\11\1\0\17\11\7\0\1\11\14\0\1\11\5\0"+
    "\20\11\1\0\1\154\1\11\1\0\17\11\7\0\1\11"+
    "\14\0\1\11\5\0\20\11\1\0\2\11\1\0\5\11"+
    "\1\155\11\11\7\0\1\11\14\0\1\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4453];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\5\1\1\11\10\1\1\11\3\1\1\11"+
    "\1\1\10\11\1\1\2\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\2\1\1\0\10\1\4\11\1\0\1\11"+
    "\1\0\1\1\1\0\3\1\3\11\1\1\1\0\13\1"+
    "\4\0\10\1\1\11\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReasonMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return STRING;
            }
            case 110: break;
            case IN_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return COMMENT;
            }
            case 111: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            }
          case 41: break;
          case 2: 
            { return BAD_CHARACTER;
            }
          case 42: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 43: break;
          case 4: 
            { return LIDENT;
            }
          case 44: break;
          case 5: 
            { return UIDENT;
            }
          case 45: break;
          case 6: 
            { return INT;
            }
          case 46: break;
          case 7: 
            { return DOT;
            }
          case 47: break;
          case 8: 
            { yybegin(IN_STRING); tokenStart();
            }
          case 48: break;
          case 9: 
            { return COLON;
            }
          case 49: break;
          case 10: 
            { return EQUAL;
            }
          case 50: break;
          case 11: 
            { return GT;
            }
          case 51: break;
          case 12: 
            { return COMMA;
            }
          case 52: break;
          case 13: 
            { return SEMI;
            }
          case 53: break;
          case 14: 
            { return LPAREN;
            }
          case 54: break;
          case 15: 
            { return RPAREN;
            }
          case 55: break;
          case 16: 
            { return LBRACE;
            }
          case 56: break;
          case 17: 
            { return RBRACE;
            }
          case 57: break;
          case 18: 
            { return LBRACKET;
            }
          case 58: break;
          case 19: 
            { return RBRACKET;
            }
          case 59: break;
          case 20: 
            { return LT;
            }
          case 60: break;
          case 21: 
            { return PLUS;
            }
          case 61: break;
          case 22: 
            { 
            }
          case 62: break;
          case 23: 
            { yybegin(INITIAL); tokenEnd(); return STRING;
            }
          case 63: break;
          case 24: 
            { return FLOAT;
            }
          case 64: break;
          case 25: 
            { yybegin(IN_COMMENT); commentDepth = 1; tokenStart();
            }
          case 65: break;
          case 26: 
            { return AUTO_CLOSE_TAG;
            }
          case 66: break;
          case 27: 
            { return SHORTCUT;
            }
          case 67: break;
          case 28: 
            { return ARROW;
            }
          case 68: break;
          case 29: 
            { return CLOSE_TAG;
            }
          case 69: break;
          case 30: 
            { commentDepth += 1;
            }
          case 70: break;
          case 31: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return COMMENT; }
            }
          case 71: break;
          case 32: 
            { return LET;
            }
          case 72: break;
          case 33: 
            { return FUN;
            }
          case 73: break;
          case 34: 
            { return TYPE;
            }
          case 74: break;
          case 35: 
            { return NONE;
            }
          case 75: break;
          case 36: 
            { return SOME;
            }
          case 76: break;
          case 37: 
            { return BBS;
            }
          case 77: break;
          case 38: 
            { return MODULE;
            }
          case 78: break;
          case 39: 
            { return INCLUDE;
            }
          case 79: break;
          case 40: 
            { return EXTERNAL;
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
