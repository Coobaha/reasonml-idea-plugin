/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.dune;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Dune.flex</tt>
 */
public class DuneLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_ML_COMMENT = 8;
  public static final int IN_SEXPR_COMMENT = 10;
  public static final int IN_SL_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\53\1\1\1\60\1\3\1\2\22\0\1\53\1\4\1\41\1\33\1\0\1\44\2\4\1\47\1\50"+
    "\1\0\1\4\1\0\1\37\2\4\4\55\4\56\2\54\1\40\1\43\1\0\1\51\3\0\6\57\24\4\1\0"+
    "\1\52\1\0\1\4\1\13\1\0\1\22\1\6\1\25\1\12\1\15\1\32\1\35\1\30\1\10\1\5\1\36"+
    "\1\11\1\27\1\21\1\20\1\31\1\4\1\16\1\17\1\26\1\7\1\14\1\34\1\24\1\23\1\4\1"+
    "\45\1\42\1\46\7\0\1\60\242\0\2\60\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\22\4\1\5\2\4\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\2\1\16\3\15\1\17\1\20\1\21\1\2\42\4"+
    "\1\22\1\23\2\4\1\0\1\24\1\0\1\15\1\0"+
    "\3\15\1\25\1\26\1\0\13\4\1\27\40\4\4\0"+
    "\2\4\1\30\1\31\5\4\1\32\2\4\1\33\12\4"+
    "\1\34\13\4\1\35\10\4\1\36\2\0\6\4\1\37"+
    "\14\4\1\40\1\41\13\4\1\42\5\4\1\43\2\4"+
    "\1\0\15\4\1\44\6\4\1\45\1\4\1\46\7\4"+
    "\1\47\10\4\1\0\2\4\1\50\1\51\1\4\1\52"+
    "\4\4\1\53\13\4\1\54\1\55\3\4\1\56\1\57"+
    "\2\4\1\60\1\61\2\4\1\62\1\0\12\4\1\63"+
    "\1\4\1\64\3\4\1\65\13\4\1\66\1\0\3\4"+
    "\1\67\10\4\1\70\5\4\1\71\1\72\5\4\1\73"+
    "\4\4\1\74\1\4\1\75\5\4\1\76\2\4\1\77"+
    "\2\4\1\100\3\4\1\101\3\4\1\102\1\4\1\103"+
    "\5\4\1\104\1\4\1\105\6\4\1\106\3\4\1\107"+
    "\3\4\1\110\5\4\1\111\1\4\1\112\7\4\1\113"+
    "\2\4\1\114\11\4\1\115\13\4\1\116\3\4\1\117"+
    "\12\4\1\120\10\4\1\121\6\4\1\122\14\4\1\123"+
    "\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u0157\0\u0157\0\u05ef\0\u0157\0\u0157\0\u0157\0\u0157\0\u0157"+
    "\0\u0620\0\u0157\0\u0651\0\u0682\0\u06b3\0\u0157\0\u0157\0\u0157"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0157\0\u0157\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0157\0\u0620\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0157"+
    "\0\u0157\0\u06e4\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\u01b9\0\u01b9\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u01b9\0\u19a6\0\u19d7\0\u01b9\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u01b9\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u01b9"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u01b9\0\u01b9\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u01b9\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u01b9"+
    "\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u01b9\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u01b9"+
    "\0\u2b11\0\u01b9\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u01b9\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e"+
    "\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u01b9\0\u2ee5"+
    "\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u01b9\0\u300b\0\u303c"+
    "\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4"+
    "\0\u31f5\0\u01b9\0\u01b9\0\u3226\0\u3257\0\u3288\0\u01b9\0\u32b9"+
    "\0\u32ea\0\u331b\0\u334c\0\u01b9\0\u337d\0\u33ae\0\u01b9\0\u33df"+
    "\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u35c9\0\u01b9\0\u35fa\0\u01b9\0\u362b\0\u365c\0\u368d"+
    "\0\u01b9\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4"+
    "\0\u3815\0\u3846\0\u3877\0\u38a8\0\u01b9\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u01b9\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92"+
    "\0\u3ac3\0\u3af4\0\u01b9\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9"+
    "\0\u01b9\0\u01b9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u0157"+
    "\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u01b9\0\u3dd3\0\u3e04\0\u3e35"+
    "\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u01b9\0\u3f2a\0\u3f5b\0\u3f8c"+
    "\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u01b9\0\u40e3"+
    "\0\u4114\0\u4145\0\u01b9\0\u4176\0\u01b9\0\u41a7\0\u41d8\0\u4209"+
    "\0\u423a\0\u426b\0\u0157\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360"+
    "\0\u4391\0\u43c2\0\u43f3\0\u01b9\0\u4424\0\u4455\0\u4486\0\u01b9"+
    "\0\u44b7\0\u44e8\0\u4519\0\u01b9\0\u454a\0\u457b\0\u45ac\0\u45dd"+
    "\0\u460e\0\u01b9\0\u463f\0\u01b9\0\u4670\0\u46a1\0\u46d2\0\u4703"+
    "\0\u4734\0\u4765\0\u4796\0\u01b9\0\u47c7\0\u47f8\0\u01b9\0\u4829"+
    "\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980\0\u49b1"+
    "\0\u01b9\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08"+
    "\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u01b9\0\u4bfd\0\u4c2e\0\u4c5f"+
    "\0\u01b9\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6"+
    "\0\u4de7\0\u4e18\0\u4e49\0\u01b9\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d"+
    "\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u01b9\0\u5002\0\u5033\0\u5064"+
    "\0\u5095\0\u50c6\0\u50f7\0\u01b9\0\u5128\0\u5159\0\u518a\0\u51bb"+
    "\0\u51ec\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343"+
    "\0\u01b9\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\61\10\62\11\3\12\1\13\1\14\1\15\1\13\1\16"+
    "\1\17\1\20\1\13\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\13\1\30\1\31\1\32\1\13\1\33"+
    "\1\34\1\35\1\36\1\13\1\37\1\13\1\40\1\41"+
    "\1\11\1\42\1\43\1\11\1\44\1\45\1\46\1\47"+
    "\1\13\1\12\4\13\1\11\2\50\1\51\1\11\35\50"+
    "\1\52\10\50\1\53\5\50\1\11\2\50\1\51\1\11"+
    "\27\50\1\54\6\50\1\55\15\50\1\11\2\50\1\51"+
    "\1\11\43\50\1\56\1\57\7\50\1\11\1\50\1\60"+
    "\1\61\1\11\54\50\1\11\62\0\3\12\47\0\1\12"+
    "\11\0\27\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\2\13\1\62\10\13\1\63\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\64\5\13"+
    "\1\65\7\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\66\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\4\13\1\67\7\13\1\70\12\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\71\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\4\13\1\72\22\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\20\13\1\73\6\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\3\13\1\74\23\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\75\2\13\1\76\2\13\1\77\4\13\1\100\2\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\2\13"+
    "\1\101\16\13\1\102\3\13\1\103\1\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\14\13\1\104\1\13"+
    "\1\105\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\5\13\1\106\13\13\1\107\5\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\7\13\1\110\4\13"+
    "\1\111\3\13\1\112\6\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\16\13\1\113\10\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\114\2\13"+
    "\1\115\12\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\3\13\1\116\6\13\1\117\3\13\1\120\6\13"+
    "\1\121\1\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\5\13\1\122\10\13\1\123\10\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\43\0\1\124\1\125\21\0"+
    "\12\13\1\126\14\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\4\13\1\127\22\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\20\0\1\130\106\0\1\131\14\0"+
    "\1\50\1\132\56\0\1\50\1\133\1\134\1\0\14\50"+
    "\1\135\3\50\1\136\27\50\3\137\1\50\43\0\1\140"+
    "\51\0\1\141\26\0\1\60\1\142\62\0\3\13\1\143"+
    "\23\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\144\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\145\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\22\13\1\146\4\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\13\13\1\147"+
    "\5\13\1\150\5\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\2\13\1\151\12\13\1\152\11\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\153"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\25\13\1\154\1\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\12\13\1\155\14\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\11\13\1\156\15\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\157"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\5\13\1\160\13\13\1\161\5\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\3\13\1\162\23\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\15\13\1\163"+
    "\11\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\164\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\1\13\1\165\25\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\166\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\22\13\1\167"+
    "\4\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\170\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\22\13\1\171\1\172\3\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\4\13\1\173\1\174"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\175\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\5\13\1\176\7\13\1\177\10\13\1\200"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\25\13"+
    "\1\201\1\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\20\13\1\202\6\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\12\13\1\203\14\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\204\11\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\6\13"+
    "\1\205\20\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\2\13\1\206\24\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\11\13\1\207\2\13\1\210\12\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\21\13"+
    "\1\211\5\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\20\13\1\212\6\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\16\13\1\213\10\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\5\13\1\214\21\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\16\13"+
    "\1\215\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\216\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\27\0\1\217\105\0\1\133\6\0\1\133"+
    "\1\134\133\0\1\220\11\0\1\221\3\0\1\221\2\0"+
    "\1\221\4\0\1\221\2\0\1\221\4\0\1\221\21\0"+
    "\4\221\55\0\3\222\6\0\4\13\1\223\22\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\14\13\1\224"+
    "\12\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\225\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\226\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\22\13\1\227\4\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\230"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\12\13\1\231\14\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\27\13\1\0\2\13\1\232\1\13\12\0"+
    "\1\13\1\0\4\13\5\0\27\13\1\0\2\13\1\233"+
    "\1\13\12\0\1\13\1\0\4\13\5\0\13\13\1\234"+
    "\13\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\235\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\21\13\1\236\5\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\11\13\1\237\15\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\26\13\1\240"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\22\13"+
    "\1\241\4\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\242\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\14\13\1\243\12\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\12\13\1\244\14\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\245\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\23\13\1\246\3\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\4\13\1\247\22\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\6\13\1\250\20\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\4\13"+
    "\1\251\22\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\11\13\1\252\15\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\16\13\1\253\10\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\14\13\1\254\12\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\4\13"+
    "\1\255\22\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\4\13\1\256\22\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\16\13\1\257\10\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\5\13\1\260\21\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\17\13"+
    "\1\261\7\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\7\13\1\262\17\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\27\13\1\0\1\13\1\263\2\13"+
    "\12\0\1\13\1\0\4\13\5\0\24\13\1\264\2\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\3\13"+
    "\1\265\5\13\1\266\15\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\267\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\25\13\1\270\1\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\23\13"+
    "\1\271\3\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\27\13\1\0\2\13\1\272\1\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\273\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\27\13\1\0\1\13"+
    "\1\274\2\13\12\0\1\13\1\0\4\13\5\0\5\13"+
    "\1\275\21\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\25\13\1\276\1\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\6\13\1\277\20\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\23\0\1\300\113\0\2\301"+
    "\10\0\1\50\3\0\1\50\2\0\1\50\4\0\1\50"+
    "\2\0\1\50\4\0\1\50\21\0\4\50\55\0\3\50"+
    "\6\0\5\13\1\302\21\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\26\13\1\303\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\304\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\3\13\1\305"+
    "\23\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\306\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\7\13\1\307\17\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\13\13\1\310\13\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\3\13\1\311"+
    "\23\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\3\13\1\312\23\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\7\13\1\313\17\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\4\13\1\314\22\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\315"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\25\13\1\316\1\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\317\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\21\13\1\320\5\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\321"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\14\13\1\322\12\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\17\13\1\323\7\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\10\13\1\324\16\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\13\13\1\325"+
    "\13\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\326\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\27\13\1\0\1\327\3\13\12\0\1\13"+
    "\1\0\4\13\5\0\14\13\1\330\12\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\2\13\1\331\24\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\23\13"+
    "\1\332\3\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\16\13\1\333\10\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\334\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\335\10\13"+
    "\1\336\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\11\13\1\337\15\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\4\13\1\340\22\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\5\13\1\341\21\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\13\13\1\342"+
    "\13\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\4\13\1\343\22\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\12\13\1\344\14\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\14\13\1\345\12\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\16\13\1\346"+
    "\10\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\12\13\1\347\14\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\350\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\2\13\1\351\24\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\25\13\1\352"+
    "\1\13\1\0\4\13\12\0\1\13\1\0\4\13\22\0"+
    "\1\353\114\0\2\50\6\0\6\13\1\354\20\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\7\13\1\355"+
    "\17\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\5\13\1\356\21\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\6\13\1\357\20\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\12\13\1\360\14\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\26\13\1\361"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\16\13"+
    "\1\362\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\22\13\1\363\4\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\2\13\1\364\24\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\14\13\1\365\12\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\366\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\13\13\1\367\13\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\6\13\1\370\20\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\22\13\1\371\4\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\5\13"+
    "\1\372\6\13\1\373\2\13\1\374\1\13\1\375\5\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\15\13"+
    "\1\376\11\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\377\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\11\13\1\u0100\15\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\7\13\1\u0101\17\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\15\13"+
    "\1\u0102\11\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\u0103\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\11\13\1\u0104\15\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\27\13\1\0\1\13"+
    "\1\u0105\2\13\12\0\1\13\1\0\4\13\5\0\26\13"+
    "\1\u0106\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\u0107\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\5\13\1\u0108\21\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\22\13\1\u0109\4\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\12\13\1\u010a"+
    "\14\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\11\13\1\u010b\15\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\21\13\1\u010c\5\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\14\13\1\u010d\12\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\22\13\1\u010e"+
    "\4\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\27\13\1\0\1\13\1\u010f\2\13\12\0\1\13\1\0"+
    "\4\13\5\0\3\13\1\u0110\23\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\u0111\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\11\13\1\u0112"+
    "\15\13\1\0\4\13\12\0\1\13\1\0\4\13\13\0"+
    "\1\u0113\52\0\7\13\1\u0114\17\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\14\13\1\u0115\12\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\u0116"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\11\13\1\u0117\15\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\4\13\1\u0118\12\13\1\u0119\7\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\u011a"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\5\13\1\u011b\21\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\16\13\1\u011c\10\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\3\13\1\u011d\23\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\15\13\1\u011e"+
    "\11\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\u011f\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\4\13\1\u0120\22\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u0121\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\11\13\1\u0122"+
    "\15\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\25\13\1\u0123\1\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\16\13\1\u0124\10\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u0125\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\16\13\1\u0126"+
    "\10\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\5\13\1\u0127\21\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\14\13\1\u0128\12\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\u0129\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\13\13\1\u012a"+
    "\13\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u012b\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\4\13\1\u012c\22\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\23\13\1\u012d\3\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\16\13\1\u012e"+
    "\10\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u012f\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\u0130\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u0131\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\u0132"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\11\13\1\u0133\15\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\u0134\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\15\13\1\u0135\11\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\u0136"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\6\13\1\u0137\20\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\23\0\1\u0138\42\0\10\13\1\u0139\16\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\u013a"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\u013b\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\u013c\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u013d\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\16\13\1\u013e"+
    "\10\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\u013f\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\2\13\1\u0140\24\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\4\13\1\u0141\22\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\22\13\1\u0142"+
    "\4\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u0143\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\14\13\1\u0144\12\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\20\13\1\u0145\6\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\22\13\1\u0146"+
    "\4\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\21\13\1\u0147\5\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\26\13\1\u0148\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\u0149\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\4\13\1\u014a\22\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\10\13"+
    "\1\u014b\16\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\u014c\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\u014d\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\u014e\15\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\27\13"+
    "\1\0\1\13\1\u014f\2\13\12\0\1\13\1\0\4\13"+
    "\5\0\7\13\1\u0150\17\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\15\13\1\u0151\11\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\u0152\15\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\27\13"+
    "\1\0\3\13\1\u0153\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\u0154\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\27\13\1\0\2\13\1\u0155\1\13\12\0"+
    "\1\13\1\0\4\13\17\0\1\u0156\46\0\11\13\1\u0157"+
    "\15\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\u0158\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\21\13\1\u0159\5\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\13\13\1\u015a\13\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\26\13\1\u015b"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\27\13"+
    "\1\0\1\13\1\u015c\2\13\12\0\1\13\1\0\4\13"+
    "\5\0\6\13\1\u015d\20\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\u015e\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\5\13\1\u015f\21\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\12\13"+
    "\1\u0160\14\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\2\13\1\u0161\24\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\u0162\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\21\13\1\u0163\5\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\5\13"+
    "\1\u0164\21\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\u0165\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\11\13\1\u0166\15\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\17\13\1\u0167\7\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u0168\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\13\13\1\u0169\13\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u016a\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\27\13\1\0\1\u016b"+
    "\3\13\12\0\1\13\1\0\4\13\5\0\16\13\1\u016c"+
    "\10\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u016d\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\3\13\1\u016e\23\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\4\13\1\u016f\22\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\13\0\1\u0170\52\0"+
    "\12\13\1\u0171\14\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\23\13\1\u0172\3\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u0173\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\u0174"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u0175\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\u0176\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\11\13\1\u0177\15\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\6\13\1\u0178"+
    "\20\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\11\13\1\u0179\15\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\1\13\1\u017a\25\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\26\13\1\u017b\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\16\13\1\u017c\10\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\27\13"+
    "\1\0\2\13\1\u017d\1\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\u017e\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\u017f\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\13\13\1\u0180\13\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\4\13"+
    "\1\u0181\22\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\23\13\1\u0182\3\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u0183\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\u0184\11\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\23\13"+
    "\1\u0185\3\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\13\13\1\u0186\13\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\u0187\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\24\13\1\u0188\2\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\16\13"+
    "\1\u0189\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\25\13\1\u018a\1\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u018b\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\7\13\1\u018c\17\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u018d\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\11\13\1\u018e\15\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\5\13\1\u018f\21\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\27\13\1\0\1\13"+
    "\1\u0190\2\13\12\0\1\13\1\0\4\13\5\0\5\13"+
    "\1\u0191\21\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\26\13\1\u0192\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\27\13\1\u0193\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\22\13\1\u0194\4\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\11\13\1\u0195\15\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\14\13\1\u0196"+
    "\12\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\u0197\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\11\13\1\u0198\15\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\4\13\1\u0199\22\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\11\13\1\u019a"+
    "\15\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\27\13\1\0\1\13\1\u019b\2\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\u019c\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\13\13\1\u019d\13\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\21\13\1\u019e"+
    "\5\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\u019f\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\u01a0\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\u01a1\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\u01a2"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\24\13\1\u01a3\2\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\13\13\1\u01a4\13\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\12\13\1\u01a5\14\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\4\13\1\u01a6"+
    "\22\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\7\13\1\u01a7\17\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\14\13\1\u01a8\12\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\16\13\1\u01a9\10\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\13\13\1\u01aa"+
    "\13\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\22\13\1\u01ab\4\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\22\13\1\u01ac\4\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\27\13\1\0\1\13\1\u01ad"+
    "\2\13\12\0\1\13\1\0\4\13\5\0\25\13\1\u01ae"+
    "\1\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\16\13\1\u01af\10\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\14\13\1\u01b0\12\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\7\13\1\u01b1\17\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\5\13\1\u01b2"+
    "\21\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\5\13\1\u01b3\21\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\15\13\1\u01b4\11\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\6\13\1\u01b5\20\13\1\0"+
    "\4\13\12\0\1\13\1\0\4\13\5\0\3\13\1\u01b6"+
    "\23\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\13\13\1\u01b7\13\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\25\13\1\u01b8\1\13\1\0\4\13\12\0"+
    "\1\13\1\0\4\13\5\0\27\13\1\0\1\13\1\u01b9"+
    "\2\13\12\0\1\13\1\0\4\13\5\0\3\13\1\u01ba"+
    "\23\13\1\0\4\13\12\0\1\13\1\0\4\13\5\0"+
    "\6\13\1\u01bb\20\13\1\0\4\13\12\0\1\13\1\0"+
    "\4\13\5\0\27\13\1\0\3\13\1\u01bc\12\0\1\13"+
    "\1\0\4\13\5\0\4\13\1\u01bd\22\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\u01be\15\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\2\13"+
    "\1\u01bf\24\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\4\13\1\u01c0\22\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u01c1\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\22\13\1\u01c2\4\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01c3\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\21\13\1\u01c4\5\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\2\13\1\u01c5\24\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\12\13\1\u01c6\14\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\13\13"+
    "\1\u01c7\13\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\u01c8\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\u01c9\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\25\13\1\u01ca\1\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\5\13"+
    "\1\u01cb\21\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\u01cc\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u01cd\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\7\13\1\u01ce\17\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\27\13"+
    "\1\0\1\13\1\u01cf\2\13\12\0\1\13\1\0\4\13"+
    "\5\0\4\13\1\u01d0\22\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u01d1\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\11\13\1\u01d2\15\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\16\13"+
    "\1\u01d3\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\16\13\1\u01d4\10\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\7\13\1\u01d5\17\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\23\13\1\u01d6\3\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\16\13"+
    "\1\u01d7\10\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\12\13\1\u01d8\14\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\12\13\1\u01d9\14\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\6\13\1\u01da\20\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\25\13"+
    "\1\u01db\1\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\15\13\1\u01dc\11\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\4\13\1\u01dd\22\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\21\13\1\u01de\5\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01df\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\5\13\1\u01e0\21\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\11\13\1\u01e1\15\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\24\13\1\u01e2\2\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\25\13"+
    "\1\u01e3\1\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\11\13\1\u01e4\15\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u01e5\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\4\13\1\u01e6\22\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01e7\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\23\13\1\u01e8\3\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\10\13\1\u01e9\16\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\u01ea\11\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01eb\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\11\13\1\u01ec\15\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\6\13\1\u01ed\20\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\u01ee\11\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01ef\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\22\13\1\u01f0\4\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\15\13\1\u01f1\11\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\16\13\1\u01f2\10\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\21\13"+
    "\1\u01f3\5\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\22\13\1\u01f4\4\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\4\13\1\u01f5\22\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\4\13\1\u01f6\22\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\5\0\11\13"+
    "\1\u01f7\15\13\1\0\4\13\12\0\1\13\1\0\4\13"+
    "\5\0\14\13\1\u01f8\12\13\1\0\4\13\12\0\1\13"+
    "\1\0\4\13\5\0\13\13\1\u01f9\13\13\1\0\4\13"+
    "\12\0\1\13\1\0\4\13\5\0\15\13\1\u01fa\11\13"+
    "\1\0\4\13\12\0\1\13\1\0\4\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\27\1\2\11\1\1\5\11\1\1\1\11"+
    "\3\1\3\11\43\1\2\11\2\1\1\0\1\11\1\0"+
    "\1\1\1\0\3\1\2\11\1\0\54\1\4\0\55\1"+
    "\2\0\51\1\1\0\47\1\1\0\44\1\1\0\35\1"+
    "\1\0\31\1\1\11\42\1\1\11\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private DuneTypes types;
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;
  private int parenDepth;

  public DuneLexer(DuneTypes types) { this.types = types; }

  // Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  // Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DuneLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING;
            }  // fall though
            case 507: break;
            case IN_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 508: break;
            case IN_SEXPR_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 509: break;
            case IN_SL_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 510: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 85: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 87: break;
          case 4: 
            { return types.ATOM;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return types.SHARP;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return types.COLON;
            } 
            // fall through
          case 90: break;
          case 7: 
            { yybegin(IN_STRING); tokenStart();
            } 
            // fall through
          case 91: break;
          case 8: 
            { yybegin(IN_SL_COMMENT); tokenStart();
            } 
            // fall through
          case 92: break;
          case 9: 
            { return types.VAR_END;
            } 
            // fall through
          case 93: break;
          case 10: 
            { return types.LPAREN;
            } 
            // fall through
          case 94: break;
          case 11: 
            { return types.RPAREN;
            } 
            // fall through
          case 95: break;
          case 12: 
            { return types.EQUAL;
            } 
            // fall through
          case 96: break;
          case 13: 
            { 
            } 
            // fall through
          case 97: break;
          case 14: 
            { yybegin(INITIAL); tokenEnd(); return types.STRING;
            } 
            // fall through
          case 98: break;
          case 15: 
            { parenDepth += 1;
            } 
            // fall through
          case 99: break;
          case 16: 
            { parenDepth -= 1; if(parenDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.COMMENT; }
            } 
            // fall through
          case 100: break;
          case 17: 
            { yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            } 
            // fall through
          case 101: break;
          case 18: 
            { yybegin(IN_ML_COMMENT); commentDepth = 1; tokenStart();
            } 
            // fall through
          case 102: break;
          case 19: 
            { yybegin(IN_SEXPR_COMMENT); parenDepth = 0; tokenStart();
            } 
            // fall through
          case 103: break;
          case 20: 
            { return types.VAR_START;
            } 
            // fall through
          case 104: break;
          case 21: 
            { commentDepth += 1;
            } 
            // fall through
          case 105: break;
          case 22: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.COMMENT; }
            } 
            // fall through
          case 106: break;
          case 23: 
            { return types.EXE;
            } 
            // fall through
          case 107: break;
          case 24: 
            { return types.BEST;
            } 
            // fall through
          case 108: break;
          case 25: 
            { return types.BYTE;
            } 
            // fall through
          case 109: break;
          case 26: 
            { return types.DEPS;
            } 
            // fall through
          case 110: break;
          case 27: 
            { return types.RULE;
            } 
            // fall through
          case 111: break;
          case 28: 
            { return types.NAME;
            } 
            // fall through
          case 112: break;
          case 29: 
            { return types.MODE;
            } 
            // fall through
          case 113: break;
          case 30: 
            { return types.KIND;
            } 
            // fall through
          case 114: break;
          case 31: 
            { return types.LOCKS;
            } 
            // fall through
          case 115: break;
          case 32: 
            { return types.NAMES;
            } 
            // fall through
          case 116: break;
          case 33: 
            { return types.ALIAS;
            } 
            // fall through
          case 117: break;
          case 34: 
            { return types.MODES;
            } 
            // fall through
          case 118: break;
          case 35: 
            { return types.FLAGS;
            } 
            // fall through
          case 119: break;
          case 36: 
            { return types.OBJECT;
            } 
            // fall through
          case 120: break;
          case 37: 
            { return types.NATIVE;
            } 
            // fall through
          case 121: break;
          case 38: 
            { return types.ACTION;
            } 
            // fall through
          case 122: break;
          case 39: 
            { return types.MENHIR;
            } 
            // fall through
          case 123: break;
          case 40: 
            { return types.INSTALL;
            } 
            // fall through
          case 124: break;
          case 41: 
            { return types.INCLUDE;
            } 
            // fall through
          case 125: break;
          case 42: 
            { return types.LIBRARY;
            } 
            // fall through
          case 126: break;
          case 43: 
            { return types.SECTION;
            } 
            // fall through
          case 127: break;
          case 44: 
            { return types.C_NAMES;
            } 
            // fall through
          case 128: break;
          case 45: 
            { return types.C_FLAGS;
            } 
            // fall through
          case 129: break;
          case 46: 
            { return types.TARGETS;
            } 
            // fall through
          case 130: break;
          case 47: 
            { return types.MODULES;
            } 
            // fall through
          case 131: break;
          case 48: 
            { return types.PROMOTE;
            } 
            // fall through
          case 132: break;
          case 49: 
            { return types.PACKAGE;
            } 
            // fall through
          case 133: break;
          case 50: 
            { return types.WRAPPED;
            } 
            // fall through
          case 134: break;
          case 51: 
            { return types.SYNOPSIS;
            } 
            // fall through
          case 135: break;
          case 52: 
            { return types.OCAML_LEX;
            } 
            // fall through
          case 136: break;
          case 53: 
            { return types.OPTIONAL;
            } 
            // fall through
          case 137: break;
          case 54: 
            { return types.FALLBACK;
            } 
            // fall through
          case 138: break;
          case 55: 
            { return types.LIBRARIES;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return types.OCAML_YACC;
            } 
            // fall through
          case 140: break;
          case 57: 
            { return types.CXX_NAMES;
            } 
            // fall through
          case 141: break;
          case 58: 
            { return types.CXX_FLAGS;
            } 
            // fall through
          case 142: break;
          case 59: 
            { return types.STANDARD;
            } 
            // fall through
          case 143: break;
          case 60: 
            { return types.LINK_FLAGS;
            } 
            // fall through
          case 144: break;
          case 61: 
            { return types.EXECUTABLE;
            } 
            // fall through
          case 145: break;
          case 62: 
            { return types.NO_DYNLINK;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return types.COPY_FILES;
            } 
            // fall through
          case 147: break;
          case 64: 
            { return types.PREPROCESS;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return types.JS_OF_OCAML;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return types.EXECUTABLES;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return types.SOURCE_TREE;
            } 
            // fall through
          case 151: break;
          case 68: 
            { return types.COPY_FILES_SHARP;
            } 
            // fall through
          case 152: break;
          case 69: 
            { return types.PUBLIC_NAME;
            } 
            // fall through
          case 153: break;
          case 70: 
            { return types.VIRTUAL_DEPS;
            } 
            // fall through
          case 154: break;
          case 71: 
            { return types.OCAMLC_FLAGS;
            } 
            // fall through
          case 155: break;
          case 72: 
            { return types.PUBLIC_NAMES;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return types.LIBRARY_FLAGS;
            } 
            // fall through
          case 157: break;
          case 74: 
            { return types.SHARED_OBJECT;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return types.VERSION;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return types.OCAMLOPT_FLAGS;
            } 
            // fall through
          case 160: break;
          case 77: 
            { return types.C_LIBRARY_FLAGS;
            } 
            // fall through
          case 161: break;
          case 78: 
            { return types.INSTALL_C_HEADERS;
            } 
            // fall through
          case 162: break;
          case 79: 
            { return types.PREPROCESSOR_DEPS;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return types.PROMOTE_UNTIL_CLEAN;
            } 
            // fall through
          case 164: break;
          case 81: 
            { return types.PPX_RUNTIME_LIBRARIES;
            } 
            // fall through
          case 165: break;
          case 82: 
            { return types.SELF_BUILD_STUBS_ARCHIVE;
            } 
            // fall through
          case 166: break;
          case 83: 
            { return types.ALLOW_OVERLAPPING_DEPENDENCIES;
            } 
            // fall through
          case 167: break;
          case 84: 
            { return types.MODULES_WITHOUT_IMPLEMENTATION;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
