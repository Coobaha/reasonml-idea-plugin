/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.dune;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Dune.flex</tt>
 */
public class DuneLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_ML_COMMENT = 8;
  public static final int IN_SEXPR_COMMENT = 10;
  public static final int IN_SL_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\46\1\1\1\53\1\3\1\2\22\0\1\46\1\4\1\7\1\10\1\0\3\4\1\5\1\6\3\0\1\44"+
    "\1\4\1\0\4\50\4\51\2\47\1\0\1\12\5\0\6\52\24\4\1\0\1\45\1\0\1\4\1\21\1\0\1"+
    "\30\1\14\1\33\1\20\1\23\1\40\1\42\1\36\1\16\1\13\1\43\1\17\1\35\1\27\1\26"+
    "\1\37\1\4\1\24\1\25\1\34\1\15\1\22\1\41\1\32\1\31\1\4\1\0\1\11\10\0\1\53\242"+
    "\0\2\53\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\23\4\1\11\1\2\1\12\3\11\1\13"+
    "\1\14\1\15\1\2\1\16\1\17\43\4\1\0\1\11"+
    "\1\0\3\11\1\20\1\21\1\0\13\4\1\22\36\4"+
    "\3\0\2\4\1\23\1\24\5\4\1\25\2\4\1\26"+
    "\11\4\1\27\13\4\1\30\7\4\1\31\1\0\6\4"+
    "\1\32\13\4\1\33\1\34\13\4\1\35\4\4\1\36"+
    "\16\4\1\37\6\4\1\40\1\4\1\41\7\4\1\42"+
    "\11\4\1\43\1\44\1\4\1\45\17\4\1\46\1\47"+
    "\3\4\1\50\1\51\2\4\1\52\2\4\1\53\11\4"+
    "\1\54\1\55\1\4\1\56\3\4\1\57\13\4\1\60"+
    "\3\4\1\61\7\4\1\62\5\4\1\63\1\64\11\4"+
    "\1\65\1\4\1\66\4\4\1\67\2\4\1\70\2\4"+
    "\1\71\3\4\1\72\3\4\1\73\6\4\1\74\1\4"+
    "\1\75\6\4\1\76\3\4\1\77\3\4\1\100\5\4"+
    "\1\101\1\4\1\102\7\4\1\103\2\4\1\104\11\4"+
    "\1\105\13\4\1\106\3\4\1\107\12\4\1\110\10\4"+
    "\1\111\6\4\1\112\14\4\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0134\0\u0160\0\u018c\0\u0134\0\u0134\0\u0134\0\u01b8\0\u0134"+
    "\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"+
    "\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0134\0\u0528\0\u0134\0\u0554\0\u0580"+
    "\0\u05ac\0\u0134\0\u0134\0\u0134\0\u05d8\0\u0134\0\u0134\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0528\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0134\0\u0134\0\u05d8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u018c\0\u018c\0\u14f8\0\u1524\0\u1550\0\u157c"+
    "\0\u15a8\0\u018c\0\u15d4\0\u1600\0\u018c\0\u162c\0\u1658\0\u1684"+
    "\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4"+
    "\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944"+
    "\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4"+
    "\0\u1ad0\0\u1afc\0\u018c\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u018c\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c"+
    "\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u018c\0\u018c"+
    "\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1fcc\0\u1ff8\0\u018c\0\u2024\0\u2050\0\u207c\0\u20a8"+
    "\0\u018c\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc"+
    "\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u018c"+
    "\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u018c\0\u2444"+
    "\0\u018c\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578"+
    "\0\u018c\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac"+
    "\0\u26d8\0\u2704\0\u2730\0\u018c\0\u275c\0\u2788\0\u27b4\0\u27e0"+
    "\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940"+
    "\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u018c\0\u018c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u018c\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c"+
    "\0\u2ba8\0\u018c\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0"+
    "\0\u2cdc\0\u2d08\0\u2d34\0\u018c\0\u018c\0\u2d60\0\u018c\0\u2d8c"+
    "\0\u2db8\0\u2de4\0\u018c\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0"+
    "\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u018c\0\u2ff4"+
    "\0\u3020\0\u304c\0\u018c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128"+
    "\0\u3154\0\u3180\0\u018c\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c"+
    "\0\u018c\0\u018c\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u3338\0\u3364"+
    "\0\u3390\0\u33bc\0\u33e8\0\u018c\0\u3414\0\u3440\0\u346c\0\u3498"+
    "\0\u34c4\0\u34f0\0\u018c\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc"+
    "\0\u35f8\0\u3624\0\u3650\0\u367c\0\u018c\0\u36a8\0\u36d4\0\u3700"+
    "\0\u018c\0\u372c\0\u3758\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u0134"+
    "\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910\0\u393c\0\u3968"+
    "\0\u018c\0\u3994\0\u39c0\0\u39ec\0\u018c\0\u3a18\0\u3a44\0\u3a70"+
    "\0\u018c\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u018c\0\u3b78"+
    "\0\u018c\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac"+
    "\0\u018c\0\u3cd8\0\u3d04\0\u018c\0\u3d30\0\u3d5c\0\u3d88\0\u3db4"+
    "\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u018c\0\u3ebc\0\u3ee8"+
    "\0\u3f14\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048"+
    "\0\u4074\0\u018c\0\u40a0\0\u40cc\0\u40f8\0\u018c\0\u4124\0\u4150"+
    "\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0"+
    "\0\u018c\0\u42dc\0\u4308\0\u4334\0\u4360\0\u438c\0\u43b8\0\u43e4"+
    "\0\u4410\0\u018c\0\u443c\0\u4468\0\u4494\0\u44c0\0\u44ec\0\u4518"+
    "\0\u018c\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4\0\u4620\0\u464c"+
    "\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u018c\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\54\10\55\11\3\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\11\1\20\1\21\1\22\1\13\1\23\1\24\1\25"+
    "\1\13\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\13\1\35\1\36\1\37\1\13\1\40\1\41\1\42"+
    "\1\13\1\43\1\13\1\11\1\12\4\13\1\11\2\44"+
    "\1\45\1\11\3\44\1\46\35\44\1\47\5\44\1\11"+
    "\2\44\1\45\1\11\4\44\1\50\1\51\41\44\1\11"+
    "\2\44\1\45\1\11\1\44\1\52\1\53\44\44\1\11"+
    "\1\44\1\54\1\55\1\11\47\44\1\11\55\0\3\12"+
    "\42\0\1\12\11\0\1\13\6\0\32\13\2\0\4\13"+
    "\12\0\1\56\1\57\45\0\1\13\6\0\1\13\1\60"+
    "\10\13\1\61\17\13\2\0\4\13\5\0\1\13\6\0"+
    "\10\13\1\62\5\13\1\63\13\13\2\0\4\13\5\0"+
    "\1\13\6\0\14\13\1\64\15\13\2\0\4\13\5\0"+
    "\1\13\6\0\3\13\1\65\7\13\1\66\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\67\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\70\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\17\13\1\71\12\13\2\0"+
    "\4\13\5\0\1\13\6\0\2\13\1\72\27\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\73\5\13\1\74"+
    "\2\13\1\75\1\13\1\76\6\13\2\0\4\13\5\0"+
    "\1\13\6\0\1\13\1\77\16\13\1\100\3\13\1\101"+
    "\5\13\2\0\4\13\5\0\1\13\6\0\13\13\1\102"+
    "\1\13\1\103\14\13\2\0\4\13\5\0\1\13\6\0"+
    "\4\13\1\104\13\13\1\105\11\13\2\0\4\13\5\0"+
    "\1\13\6\0\6\13\1\106\4\13\1\107\3\13\1\110"+
    "\12\13\2\0\4\13\5\0\1\13\6\0\15\13\1\111"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\10\13\1\112"+
    "\2\13\1\113\16\13\2\0\4\13\5\0\1\13\6\0"+
    "\2\13\1\114\6\13\1\115\12\13\1\116\5\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\117\10\13\1\120"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\11\13\1\121"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\3\13\1\122"+
    "\26\13\2\0\4\13\2\0\1\44\1\123\51\0\1\44"+
    "\1\124\1\125\1\0\22\44\1\126\3\44\1\127\14\44"+
    "\3\130\1\44\12\0\1\131\52\0\1\132\44\0\1\54"+
    "\1\133\55\0\1\13\6\0\2\13\1\134\27\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\135\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\136\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\137\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\140\5\13\1\141"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\1\13\1\142"+
    "\12\13\1\143\15\13\2\0\4\13\5\0\1\13\6\0"+
    "\20\13\1\144\11\13\2\0\4\13\5\0\1\13\6\0"+
    "\24\13\1\145\5\13\2\0\4\13\5\0\1\13\6\0"+
    "\11\13\1\146\20\13\2\0\4\13\5\0\1\13\6\0"+
    "\10\13\1\147\21\13\2\0\4\13\5\0\1\13\6\0"+
    "\4\13\1\150\25\13\2\0\4\13\5\0\1\13\6\0"+
    "\4\13\1\151\25\13\2\0\4\13\5\0\1\13\6\0"+
    "\14\13\1\152\15\13\2\0\4\13\5\0\1\13\6\0"+
    "\15\13\1\153\14\13\2\0\4\13\5\0\1\13\6\0"+
    "\15\13\1\154\14\13\2\0\4\13\5\0\1\13\6\0"+
    "\1\155\31\13\2\0\4\13\5\0\1\13\6\0\15\13"+
    "\1\156\14\13\2\0\4\13\5\0\1\13\6\0\21\13"+
    "\1\157\10\13\2\0\4\13\5\0\1\13\6\0\6\13"+
    "\1\160\23\13\2\0\4\13\5\0\1\13\6\0\21\13"+
    "\1\161\1\162\7\13\2\0\4\13\5\0\1\13\6\0"+
    "\3\13\1\163\1\164\25\13\2\0\4\13\5\0\1\13"+
    "\6\0\21\13\1\165\10\13\2\0\4\13\5\0\1\13"+
    "\6\0\4\13\1\166\7\13\1\167\10\13\1\170\4\13"+
    "\2\0\4\13\5\0\1\13\6\0\24\13\1\171\5\13"+
    "\2\0\4\13\5\0\1\13\6\0\17\13\1\172\12\13"+
    "\2\0\4\13\5\0\1\13\6\0\11\13\1\173\20\13"+
    "\2\0\4\13\5\0\1\13\6\0\14\13\1\174\15\13"+
    "\2\0\4\13\5\0\1\13\6\0\5\13\1\175\24\13"+
    "\2\0\4\13\5\0\1\13\6\0\1\13\1\176\30\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\177\2\13"+
    "\1\200\16\13\2\0\4\13\5\0\1\13\6\0\17\13"+
    "\1\201\12\13\2\0\4\13\5\0\1\13\6\0\15\13"+
    "\1\202\14\13\2\0\4\13\5\0\1\13\6\0\4\13"+
    "\1\203\25\13\2\0\4\13\5\0\1\13\6\0\15\13"+
    "\1\204\14\13\2\0\4\13\5\0\1\13\6\0\14\13"+
    "\1\205\15\13\2\0\4\13\47\0\1\124\6\0\1\124"+
    "\1\125\121\0\1\206\17\0\1\207\3\0\1\207\2\0"+
    "\1\207\4\0\1\207\2\0\1\207\4\0\1\207\6\0"+
    "\4\207\50\0\3\210\6\0\1\13\6\0\3\13\1\211"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\13\13\1\212"+
    "\16\13\2\0\4\13\5\0\1\13\6\0\21\13\1\213"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\10\13\1\214"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\21\13\1\215"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\4\13\1\216"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\11\13\1\217"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\30\13\1\220"+
    "\1\13\2\0\4\13\5\0\1\13\6\0\30\13\1\221"+
    "\1\13\2\0\4\13\5\0\1\13\6\0\12\13\1\222"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\21\13\1\223"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\20\13\1\224"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\10\13\1\225"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\25\13\1\226"+
    "\4\13\2\0\4\13\5\0\1\13\6\0\13\13\1\227"+
    "\16\13\2\0\4\13\5\0\1\13\6\0\14\13\1\230"+
    "\15\13\2\0\4\13\5\0\1\13\6\0\11\13\1\231"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\10\13\1\232"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\22\13\1\233"+
    "\7\13\2\0\4\13\5\0\1\13\6\0\3\13\1\234"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\5\13\1\235"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\3\13\1\236"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\10\13\1\237"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\15\13\1\240"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\13\13\1\241"+
    "\16\13\2\0\4\13\5\0\1\13\6\0\3\13\1\242"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\3\13\1\243"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\15\13\1\244"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\4\13\1\245"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\16\13\1\246"+
    "\13\13\2\0\4\13\5\0\1\13\6\0\6\13\1\247"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\27\13\1\250"+
    "\2\13\2\0\4\13\5\0\1\13\6\0\23\13\1\251"+
    "\6\13\2\0\4\13\5\0\1\13\6\0\2\13\1\252"+
    "\5\13\1\253\21\13\2\0\4\13\5\0\1\13\6\0"+
    "\4\13\1\254\25\13\2\0\4\13\5\0\1\13\6\0"+
    "\24\13\1\255\5\13\2\0\4\13\5\0\1\13\6\0"+
    "\22\13\1\256\7\13\2\0\4\13\5\0\1\13\6\0"+
    "\6\13\1\257\23\13\2\0\4\13\5\0\1\13\6\0"+
    "\27\13\1\260\2\13\2\0\4\13\5\0\1\13\6\0"+
    "\4\13\1\261\25\13\2\0\4\13\5\0\1\13\6\0"+
    "\24\13\1\262\5\13\2\0\4\13\5\0\1\13\6\0"+
    "\5\13\1\263\24\13\2\0\4\13\51\0\2\264\16\0"+
    "\1\44\3\0\1\44\2\0\1\44\4\0\1\44\2\0"+
    "\1\44\4\0\1\44\6\0\4\44\50\0\3\44\6\0"+
    "\1\13\6\0\4\13\1\265\25\13\2\0\4\13\5\0"+
    "\1\13\6\0\25\13\1\266\4\13\2\0\4\13\5\0"+
    "\1\13\6\0\15\13\1\267\14\13\2\0\4\13\5\0"+
    "\1\13\6\0\2\13\1\270\27\13\2\0\4\13\5\0"+
    "\1\13\6\0\15\13\1\271\14\13\2\0\4\13\5\0"+
    "\1\13\6\0\6\13\1\272\23\13\2\0\4\13\5\0"+
    "\1\13\6\0\12\13\1\273\17\13\2\0\4\13\5\0"+
    "\1\13\6\0\2\13\1\274\27\13\2\0\4\13\5\0"+
    "\1\13\6\0\2\13\1\275\27\13\2\0\4\13\5\0"+
    "\1\13\6\0\6\13\1\276\23\13\2\0\4\13\5\0"+
    "\1\13\6\0\24\13\1\277\5\13\2\0\4\13\5\0"+
    "\1\13\6\0\5\13\1\300\24\13\2\0\4\13\5\0"+
    "\1\13\6\0\10\13\1\301\21\13\2\0\4\13\5\0"+
    "\1\13\6\0\20\13\1\302\11\13\2\0\4\13\5\0"+
    "\1\13\6\0\4\13\1\303\25\13\2\0\4\13\5\0"+
    "\1\13\6\0\13\13\1\304\16\13\2\0\4\13\5\0"+
    "\1\13\6\0\16\13\1\305\13\13\2\0\4\13\5\0"+
    "\1\13\6\0\7\13\1\306\22\13\2\0\4\13\5\0"+
    "\1\13\6\0\12\13\1\307\17\13\2\0\4\13\5\0"+
    "\1\13\6\0\12\13\1\310\17\13\2\0\4\13\5\0"+
    "\1\13\6\0\26\13\1\311\3\13\2\0\4\13\5\0"+
    "\1\13\6\0\13\13\1\312\16\13\2\0\4\13\5\0"+
    "\1\13\6\0\1\13\1\313\30\13\2\0\4\13\5\0"+
    "\1\13\6\0\22\13\1\314\7\13\2\0\4\13\5\0"+
    "\1\13\6\0\15\13\1\315\14\13\2\0\4\13\5\0"+
    "\1\13\6\0\6\13\1\316\23\13\2\0\4\13\5\0"+
    "\1\13\6\0\14\13\1\317\10\13\1\320\4\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\321\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\322\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\323\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\324\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\325\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\326\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\327\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\330\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\331\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\1\13\1\332\30\13\2\0"+
    "\4\13\5\0\1\13\6\0\24\13\1\333\5\13\2\0"+
    "\4\13\51\0\2\44\6\0\1\13\6\0\5\13\1\334"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\6\13\1\335"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\4\13\1\336"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\5\13\1\337"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\11\13\1\340"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\25\13\1\341"+
    "\4\13\2\0\4\13\5\0\1\13\6\0\15\13\1\342"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\21\13\1\343"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\1\13\1\344"+
    "\30\13\2\0\4\13\5\0\1\13\6\0\12\13\1\345"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\15\13\1\346"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\5\13\1\347"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\21\13\1\350"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\4\13\1\351"+
    "\6\13\1\352\2\13\1\353\1\13\1\354\11\13\2\0"+
    "\4\13\5\0\1\13\6\0\14\13\1\355\15\13\2\0"+
    "\4\13\5\0\1\13\6\0\14\13\1\356\15\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\357\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\360\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\14\13\1\361\15\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\362\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\363\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\27\13\1\364\2\13\2\0"+
    "\4\13\5\0\1\13\6\0\25\13\1\365\4\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\366\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\367\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\370\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\371\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\372\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\20\13\1\373\11\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\374\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\375\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\2\13\1\376\27\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\377\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u0100\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\u0101\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\u0102\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0103\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u0104\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\u0105\12\13\1\u0106"+
    "\13\13\2\0\4\13\5\0\1\13\6\0\4\13\1\u0107"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\4\13\1\u0108"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u0109"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\2\13\1\u010a"+
    "\27\13\2\0\4\13\5\0\1\13\6\0\3\13\1\u010b"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\11\13\1\u010c"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u010d"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\10\13\1\u010e"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\24\13\1\u010f"+
    "\5\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u0110"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u0111"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u0112"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\4\13\1\u0113"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\13\13\1\u0114"+
    "\16\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u0115"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\12\13\1\u0116"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\12\13\1\u0117"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\3\13\1\u0118"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\22\13\1\u0119"+
    "\7\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u011a"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\12\13\1\u011b"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\12\13\1\u011c"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u011d"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\20\13\1\u011e"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\10\13\1\u011f"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\14\13\1\u0120"+
    "\15\13\2\0\4\13\5\0\1\13\6\0\20\13\1\u0121"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\5\13\1\u0122"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\7\13\1\u0123"+
    "\22\13\2\0\4\13\5\0\1\13\6\0\20\13\1\u0124"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u0125"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\10\13\1\u0126"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u0127"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\15\13\1\u0128"+
    "\14\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u0129"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\1\13\1\u012a"+
    "\30\13\2\0\4\13\5\0\1\13\6\0\3\13\1\u012b"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\12\13\1\u012c"+
    "\17\13\2\0\4\13\5\0\1\13\6\0\5\13\1\u012d"+
    "\24\13\2\0\4\13\5\0\1\13\6\0\13\13\1\u012e"+
    "\16\13\2\0\4\13\5\0\1\13\6\0\17\13\1\u012f"+
    "\12\13\2\0\4\13\5\0\1\13\6\0\21\13\1\u0130"+
    "\10\13\2\0\4\13\5\0\1\13\6\0\20\13\1\u0131"+
    "\11\13\2\0\4\13\5\0\1\13\6\0\25\13\1\u0132"+
    "\4\13\2\0\4\13\5\0\1\13\6\0\4\13\1\u0133"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\3\13\1\u0134"+
    "\26\13\2\0\4\13\5\0\1\13\6\0\7\13\1\u0135"+
    "\22\13\2\0\4\13\5\0\1\13\6\0\11\13\1\u0136"+
    "\20\13\2\0\4\13\5\0\1\13\6\0\4\13\1\u0137"+
    "\25\13\2\0\4\13\5\0\1\13\6\0\10\13\1\u0138"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\27\13\1\u0139"+
    "\2\13\2\0\4\13\5\0\1\13\6\0\6\13\1\u013a"+
    "\23\13\2\0\4\13\5\0\1\13\6\0\14\13\1\u013b"+
    "\15\13\2\0\4\13\5\0\1\13\6\0\10\13\1\u013c"+
    "\21\13\2\0\4\13\5\0\1\13\6\0\31\13\1\u013d"+
    "\2\0\4\13\5\0\1\13\6\0\21\13\1\u013e\10\13"+
    "\2\0\4\13\5\0\1\13\6\0\30\13\1\u013f\1\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\u0140\21\13"+
    "\2\0\4\13\5\0\1\13\6\0\15\13\1\u0141\14\13"+
    "\2\0\4\13\5\0\1\13\6\0\20\13\1\u0142\11\13"+
    "\2\0\4\13\5\0\1\13\6\0\12\13\1\u0143\17\13"+
    "\2\0\4\13\5\0\1\13\6\0\25\13\1\u0144\4\13"+
    "\2\0\4\13\5\0\1\13\6\0\27\13\1\u0145\2\13"+
    "\2\0\4\13\5\0\1\13\6\0\5\13\1\u0146\24\13"+
    "\2\0\4\13\5\0\1\13\6\0\4\13\1\u0147\25\13"+
    "\2\0\4\13\5\0\1\13\6\0\4\13\1\u0148\25\13"+
    "\2\0\4\13\5\0\1\13\6\0\1\13\1\u0149\30\13"+
    "\2\0\4\13\5\0\1\13\6\0\6\13\1\u014a\23\13"+
    "\2\0\4\13\5\0\1\13\6\0\20\13\1\u014b\11\13"+
    "\2\0\4\13\5\0\1\13\6\0\4\13\1\u014c\25\13"+
    "\2\0\4\13\5\0\1\13\6\0\14\13\1\u014d\15\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\u014e\21\13"+
    "\2\0\4\13\5\0\1\13\6\0\16\13\1\u014f\13\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\u0150\21\13"+
    "\2\0\4\13\5\0\1\13\6\0\12\13\1\u0151\17\13"+
    "\2\0\4\13\5\0\1\13\6\0\12\13\1\u0152\17\13"+
    "\2\0\4\13\5\0\1\13\6\0\26\13\1\u0153\3\13"+
    "\2\0\4\13\5\0\1\13\6\0\15\13\1\u0154\14\13"+
    "\2\0\4\13\5\0\1\13\6\0\12\13\1\u0155\17\13"+
    "\2\0\4\13\5\0\1\13\6\0\2\13\1\u0156\27\13"+
    "\2\0\4\13\5\0\1\13\6\0\3\13\1\u0157\26\13"+
    "\2\0\4\13\5\0\1\13\6\0\11\13\1\u0158\20\13"+
    "\2\0\4\13\5\0\1\13\6\0\22\13\1\u0159\7\13"+
    "\2\0\4\13\5\0\1\13\6\0\6\13\1\u015a\23\13"+
    "\2\0\4\13\5\0\1\13\6\0\4\13\1\u015b\25\13"+
    "\2\0\4\13\5\0\1\13\6\0\12\13\1\u015c\17\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\u015d\21\13"+
    "\2\0\4\13\5\0\1\13\6\0\10\13\1\u015e\21\13"+
    "\2\0\4\13\5\0\1\13\6\0\5\13\1\u015f\24\13"+
    "\2\0\4\13\5\0\1\13\6\0\1\u0160\31\13\2\0"+
    "\4\13\5\0\1\13\6\0\25\13\1\u0161\4\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u0162\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\30\13\1\u0163\1\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\u0164\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\u0165\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0166\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\u0167\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\22\13\1\u0168\7\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0169\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\14\13\1\u016a\15\13\2\0"+
    "\4\13\5\0\1\13\6\0\22\13\1\u016b\7\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u016c\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u016d\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\23\13\1\u016e\6\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u016f\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\24\13\1\u0170\5\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0171\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\u0172\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u0173\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0174\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\27\13\1\u0175\2\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0176\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\25\13\1\u0177\4\13\2\0"+
    "\4\13\5\0\1\13\3\0\1\u0178\2\0\32\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\u0179\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u017a\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\u017b\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\u017c\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u017d\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\u017e\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\10\13\1\u017f\21\13\2\0"+
    "\4\13\5\0\1\13\6\0\27\13\1\u0180\2\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0181\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0182\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\20\13\1\u0183\11\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u0184\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0185\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u0186\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0187\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\23\13\1\u0188\6\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u0189\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\11\13\1\u018a\20\13\2\0"+
    "\4\13\5\0\1\13\6\0\3\13\1\u018b\26\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\u018c\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\u018d\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u018e\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u018f\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\u0190\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\21\13\1\u0191\10\13\2\0"+
    "\4\13\5\0\1\13\6\0\27\13\1\u0192\2\13\2\0"+
    "\4\13\5\0\1\13\6\0\24\13\1\u0193\5\13\2\0"+
    "\4\13\5\0\1\13\6\0\15\13\1\u0194\14\13\2\0"+
    "\4\13\5\0\1\13\6\0\13\13\1\u0195\16\13\2\0"+
    "\4\13\5\0\1\13\6\0\6\13\1\u0196\23\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0197\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\4\13\1\u0198\25\13\2\0"+
    "\4\13\5\0\1\13\6\0\14\13\1\u0199\15\13\2\0"+
    "\4\13\5\0\1\13\6\0\5\13\1\u019a\24\13\2\0"+
    "\4\13\5\0\1\13\6\0\2\13\1\u019b\27\13\2\0"+
    "\4\13\5\0\1\13\6\0\12\13\1\u019c\17\13\2\0"+
    "\4\13\5\0\1\13\6\0\24\13\1\u019d\5\13\2\0"+
    "\4\13\5\0\1\13\6\0\27\13\1\u019e\2\13\2\0"+
    "\4\13\5\0\1\13\6\0\2\13\1\u019f\27\13\2\0"+
    "\4\13\5\0\1\13\6\0\5\13\1\u01a0\24\13\2\0"+
    "\4\13\5\0\1\13\6\0\31\13\1\u01a1\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01a2\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01a3\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\1\13\1\u01a4\30\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01a5\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01a6\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\21\13\1\u01a7\10\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01a8\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\20\13\1\u01a9\11\13\2\0\4\13"+
    "\5\0\1\13\6\0\1\13\1\u01aa\30\13\2\0\4\13"+
    "\5\0\1\13\6\0\11\13\1\u01ab\20\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01ac\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01ad\15\13\2\0\4\13"+
    "\5\0\1\13\6\0\6\13\1\u01ae\23\13\2\0\4\13"+
    "\5\0\1\13\6\0\24\13\1\u01af\5\13\2\0\4\13"+
    "\5\0\1\13\6\0\4\13\1\u01b0\25\13\2\0\4\13"+
    "\5\0\1\13\6\0\11\13\1\u01b1\20\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01b2\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\6\13\1\u01b3\23\13\2\0\4\13"+
    "\5\0\1\13\6\0\27\13\1\u01b4\2\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01b5\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01b6\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01b7\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\15\13\1\u01b8\14\13\2\0\4\13"+
    "\5\0\1\13\6\0\15\13\1\u01b9\14\13\2\0\4\13"+
    "\5\0\1\13\6\0\6\13\1\u01ba\23\13\2\0\4\13"+
    "\5\0\1\13\6\0\22\13\1\u01bb\7\13\2\0\4\13"+
    "\5\0\1\13\6\0\15\13\1\u01bc\14\13\2\0\4\13"+
    "\5\0\1\13\6\0\11\13\1\u01bd\20\13\2\0\4\13"+
    "\5\0\1\13\6\0\11\13\1\u01be\20\13\2\0\4\13"+
    "\5\0\1\13\6\0\5\13\1\u01bf\24\13\2\0\4\13"+
    "\5\0\1\13\6\0\24\13\1\u01c0\5\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01c1\15\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01c2\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\20\13\1\u01c3\11\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01c4\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\4\13\1\u01c5\25\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01c6\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\23\13\1\u01c7\6\13\2\0\4\13"+
    "\5\0\1\13\6\0\24\13\1\u01c8\5\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01c9\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01ca\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01cb\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01cc\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\22\13\1\u01cd\7\13\2\0\4\13"+
    "\5\0\1\13\6\0\7\13\1\u01ce\22\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01cf\15\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01d0\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01d1\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\5\13\1\u01d2\24\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01d3\15\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01d4\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\21\13\1\u01d5\10\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01d6\15\13\2\0\4\13"+
    "\5\0\1\13\6\0\15\13\1\u01d7\14\13\2\0\4\13"+
    "\5\0\1\13\6\0\20\13\1\u01d8\11\13\2\0\4\13"+
    "\5\0\1\13\6\0\21\13\1\u01d9\10\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01da\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\3\13\1\u01db\26\13\2\0\4\13"+
    "\5\0\1\13\6\0\10\13\1\u01dc\21\13\2\0\4\13"+
    "\5\0\1\13\6\0\13\13\1\u01dd\16\13\2\0\4\13"+
    "\5\0\1\13\6\0\12\13\1\u01de\17\13\2\0\4\13"+
    "\5\0\1\13\6\0\14\13\1\u01df\15\13\2\0\4\13"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\2\1\3\11\1\1\1\11\23\1\1\11"+
    "\1\1\1\11\3\1\3\11\1\1\2\11\43\1\1\0"+
    "\1\1\1\0\3\1\2\11\1\0\52\1\3\0\53\1"+
    "\1\0\303\1\1\11\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private DuneTypes types;
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;
  private int parenDepth;

  public DuneLexer(DuneTypes types) { this.types = types; }

  // Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  // Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DuneLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING;
            }  // fall though
            case 480: break;
            case IN_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 481: break;
            case IN_SEXPR_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 482: break;
            case IN_SL_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 483: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 77: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 78: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 4: 
            { return types.ATOM;
            } 
            // fall through
          case 80: break;
          case 5: 
            { return types.LPAREN;
            } 
            // fall through
          case 81: break;
          case 6: 
            { return types.RPAREN;
            } 
            // fall through
          case 82: break;
          case 7: 
            { yybegin(IN_STRING); tokenStart();
            } 
            // fall through
          case 83: break;
          case 8: 
            { yybegin(IN_SL_COMMENT); tokenStart();
            } 
            // fall through
          case 84: break;
          case 9: 
            { 
            } 
            // fall through
          case 85: break;
          case 10: 
            { yybegin(INITIAL); tokenEnd(); return types.STRING;
            } 
            // fall through
          case 86: break;
          case 11: 
            { parenDepth += 1;
            } 
            // fall through
          case 87: break;
          case 12: 
            { parenDepth -= 1; if(parenDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.COMMENT; }
            } 
            // fall through
          case 88: break;
          case 13: 
            { yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            } 
            // fall through
          case 89: break;
          case 14: 
            { yybegin(IN_ML_COMMENT); commentDepth = 1; tokenStart();
            } 
            // fall through
          case 90: break;
          case 15: 
            { yybegin(IN_SEXPR_COMMENT); parenDepth = 0; tokenStart();
            } 
            // fall through
          case 91: break;
          case 16: 
            { commentDepth += 1;
            } 
            // fall through
          case 92: break;
          case 17: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.COMMENT; }
            } 
            // fall through
          case 93: break;
          case 18: 
            { return types.EXE;
            } 
            // fall through
          case 94: break;
          case 19: 
            { return types.BEST;
            } 
            // fall through
          case 95: break;
          case 20: 
            { return types.BYTE;
            } 
            // fall through
          case 96: break;
          case 21: 
            { return types.DEPS;
            } 
            // fall through
          case 97: break;
          case 22: 
            { return types.RULE;
            } 
            // fall through
          case 98: break;
          case 23: 
            { return types.NAME;
            } 
            // fall through
          case 99: break;
          case 24: 
            { return types.MODE;
            } 
            // fall through
          case 100: break;
          case 25: 
            { return types.KIND;
            } 
            // fall through
          case 101: break;
          case 26: 
            { return types.LOCKS;
            } 
            // fall through
          case 102: break;
          case 27: 
            { return types.NAMES;
            } 
            // fall through
          case 103: break;
          case 28: 
            { return types.ALIAS;
            } 
            // fall through
          case 104: break;
          case 29: 
            { return types.MODES;
            } 
            // fall through
          case 105: break;
          case 30: 
            { return types.FLAGS;
            } 
            // fall through
          case 106: break;
          case 31: 
            { return types.OBJECT;
            } 
            // fall through
          case 107: break;
          case 32: 
            { return types.NATIVE;
            } 
            // fall through
          case 108: break;
          case 33: 
            { return types.ACTION;
            } 
            // fall through
          case 109: break;
          case 34: 
            { return types.MENHIR;
            } 
            // fall through
          case 110: break;
          case 35: 
            { return types.INSTALL;
            } 
            // fall through
          case 111: break;
          case 36: 
            { return types.INCLUDE;
            } 
            // fall through
          case 112: break;
          case 37: 
            { return types.LIBRARY;
            } 
            // fall through
          case 113: break;
          case 38: 
            { return types.C_NAMES;
            } 
            // fall through
          case 114: break;
          case 39: 
            { return types.C_FLAGS;
            } 
            // fall through
          case 115: break;
          case 40: 
            { return types.TARGETS;
            } 
            // fall through
          case 116: break;
          case 41: 
            { return types.MODULES;
            } 
            // fall through
          case 117: break;
          case 42: 
            { return types.PROMOTE;
            } 
            // fall through
          case 118: break;
          case 43: 
            { return types.WRAPPED;
            } 
            // fall through
          case 119: break;
          case 44: 
            { return types.SYNOPSIS;
            } 
            // fall through
          case 120: break;
          case 45: 
            { return types.STANDARD;
            } 
            // fall through
          case 121: break;
          case 46: 
            { return types.OCAML_LEX;
            } 
            // fall through
          case 122: break;
          case 47: 
            { return types.OPTIONAL;
            } 
            // fall through
          case 123: break;
          case 48: 
            { return types.FALLBACK;
            } 
            // fall through
          case 124: break;
          case 49: 
            { return types.LIBRARIES;
            } 
            // fall through
          case 125: break;
          case 50: 
            { return types.OCAML_YACC;
            } 
            // fall through
          case 126: break;
          case 51: 
            { return types.CXX_NAMES;
            } 
            // fall through
          case 127: break;
          case 52: 
            { return types.CXX_FLAGS;
            } 
            // fall through
          case 128: break;
          case 53: 
            { return types.LINK_FLAGS;
            } 
            // fall through
          case 129: break;
          case 54: 
            { return types.EXECUTABLE;
            } 
            // fall through
          case 130: break;
          case 55: 
            { return types.NO_DYNLINK;
            } 
            // fall through
          case 131: break;
          case 56: 
            { return types.COPY_FILES;
            } 
            // fall through
          case 132: break;
          case 57: 
            { return types.PREPROCESS;
            } 
            // fall through
          case 133: break;
          case 58: 
            { return types.JS_OF_OCAML;
            } 
            // fall through
          case 134: break;
          case 59: 
            { return types.EXECUTABLES;
            } 
            // fall through
          case 135: break;
          case 60: 
            { return types.COPY_FILES_SHARP;
            } 
            // fall through
          case 136: break;
          case 61: 
            { return types.PUBLIC_NAME;
            } 
            // fall through
          case 137: break;
          case 62: 
            { return types.VIRTUAL_DEPS;
            } 
            // fall through
          case 138: break;
          case 63: 
            { return types.OCAMLC_FLAGS;
            } 
            // fall through
          case 139: break;
          case 64: 
            { return types.PUBLIC_NAMES;
            } 
            // fall through
          case 140: break;
          case 65: 
            { return types.LIBRARY_FLAGS;
            } 
            // fall through
          case 141: break;
          case 66: 
            { return types.SHARED_OBJECT;
            } 
            // fall through
          case 142: break;
          case 67: 
            { return types.VERSION;
            } 
            // fall through
          case 143: break;
          case 68: 
            { return types.OCAMLOPT_FLAGS;
            } 
            // fall through
          case 144: break;
          case 69: 
            { return types.C_LIBRARY_FLAGS;
            } 
            // fall through
          case 145: break;
          case 70: 
            { return types.INSTALL_C_HEADERS;
            } 
            // fall through
          case 146: break;
          case 71: 
            { return types.PREPROCESSOR_DEPS;
            } 
            // fall through
          case 147: break;
          case 72: 
            { return types.PROMOTE_UNTIL_CLEAN;
            } 
            // fall through
          case 148: break;
          case 73: 
            { return types.PPX_RUNTIME_LIBRARIES;
            } 
            // fall through
          case 149: break;
          case 74: 
            { return types.SELF_BUILD_STUBS_ARCHIVE;
            } 
            // fall through
          case 150: break;
          case 75: 
            { return types.ALLOW_OVERLAPPING_DEPENDENCIES;
            } 
            // fall through
          case 151: break;
          case 76: 
            { return types.MODULES_WITHOUT_IMPLEMENTATION;
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
