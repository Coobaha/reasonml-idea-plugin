/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.dune;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Dune.flex</tt>
 */
public class DuneLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_ML_COMMENT = 8;
  public static final int IN_SEXPR_COMMENT = 10;
  public static final int IN_SL_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\45\1\1\1\52\1\3\1\2\22\0\1\45\1\4\1\7\1\10\1\0\3\4\1\5\1\6\6\0\4\47"+
    "\4\50\2\46\1\0\1\12\5\0\6\51\24\4\1\0\1\44\1\0\1\4\1\21\1\0\1\30\1\14\1\33"+
    "\1\20\1\23\1\42\1\43\1\40\1\16\1\13\1\41\1\17\1\35\1\27\1\26\1\36\1\4\1\24"+
    "\1\25\1\34\1\15\1\22\1\37\1\32\1\31\1\4\1\0\1\11\10\0\1\52\242\0\2\52\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\17\4\1\11\1\2\1\12\3\11\1\13"+
    "\1\2\1\14\1\15\26\4\1\0\1\11\1\0\3\11"+
    "\1\16\1\17\1\0\30\4\3\0\13\4\1\20\13\4"+
    "\1\21\1\4\1\0\22\4\1\22\4\4\1\23\33\4"+
    "\1\24\12\4\1\25\1\26\2\4\1\27\3\4\1\30"+
    "\10\4\1\31\2\4\1\32\14\4\1\33\11\4\1\34"+
    "\1\35\11\4\1\36\3\4\1\37\4\4\1\40\2\4"+
    "\1\41\11\4\1\42\5\4\1\43\2\4\1\44\7\4"+
    "\1\45\7\4\1\46\2\4\1\47\10\4\1\50\11\4"+
    "\1\51\3\4\1\52\20\4\1\53\6\4\1\54\14\4"+
    "\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u0102"+
    "\0\u012d\0\u0158\0\u0102\0\u0102\0\u0102\0\u0183\0\u0102\0\u01ae"+
    "\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306"+
    "\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0102\0\u0433"+
    "\0\u0102\0\u045e\0\u0489\0\u04b4\0\u0102\0\u04df\0\u0102\0\u0102"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u0433\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0102\0\u0102\0\u04df\0\u0993"+
    "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0158\0\u0ff5\0\u1020"+
    "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178"+
    "\0\u11a3\0\u0158\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd"+
    "\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u0158\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u0158\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af"+
    "\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u0158\0\u0158\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9"+
    "\0\u1ce4\0\u1d0f\0\u0158\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6"+
    "\0\u1e11\0\u1e3c\0\u1e67\0\u0158\0\u1e92\0\u1ebd\0\u0158\0\u1ee8"+
    "\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040"+
    "\0\u206b\0\u2096\0\u20c1\0\u0158\0\u20ec\0\u2117\0\u2142\0\u216d"+
    "\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u0158\0\u0158\0\u226f"+
    "\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7"+
    "\0\u0158\0\u23f2\0\u241d\0\u2448\0\u0158\0\u2473\0\u249e\0\u24c9"+
    "\0\u24f4\0\u251f\0\u254a\0\u2575\0\u0158\0\u25a0\0\u25cb\0\u25f6"+
    "\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u0158\0\u2723"+
    "\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u0158\0\u27fa\0\u2825\0\u0158"+
    "\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u0158"+
    "\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u0158"+
    "\0\u2aaa\0\u2ad5\0\u0158\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac"+
    "\0\u2bd7\0\u2c02\0\u2c2d\0\u0158\0\u2c58\0\u2c83\0\u2cae\0\u2cd9"+
    "\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u0158\0\u2ddb\0\u2e06"+
    "\0\u2e31\0\u0158\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33"+
    "\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b"+
    "\0\u30b6\0\u30e1\0\u0158\0\u310c\0\u3137\0\u3162\0\u318d\0\u31b8"+
    "\0\u31e3\0\u0158\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5"+
    "\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u0158\0\u0158";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\53\7\54\10\3\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\10\1\17\1\20\2\12\1\21\1\22\2\12\1\23"+
    "\1\24\1\12\1\25\1\26\1\27\1\30\2\12\1\31"+
    "\1\12\1\32\1\33\1\34\1\12\1\35\1\36\1\12"+
    "\1\10\1\11\4\12\1\10\2\37\1\40\1\10\3\37"+
    "\1\41\34\37\1\42\5\37\1\10\2\37\1\40\1\10"+
    "\4\37\1\43\1\44\40\37\1\10\1\37\1\45\1\46"+
    "\1\10\46\37\1\10\54\0\3\11\41\0\1\11\11\0"+
    "\1\12\6\0\31\12\2\0\4\12\12\0\1\47\1\50"+
    "\44\0\1\12\6\0\1\12\1\51\10\12\1\52\16\12"+
    "\2\0\4\12\5\0\1\12\6\0\14\12\1\53\14\12"+
    "\2\0\4\12\5\0\1\12\6\0\3\12\1\54\25\12"+
    "\2\0\4\12\5\0\1\12\6\0\3\12\1\55\25\12"+
    "\2\0\4\12\5\0\1\12\6\0\17\12\1\56\11\12"+
    "\2\0\4\12\5\0\1\12\6\0\10\12\1\57\5\12"+
    "\1\60\12\12\2\0\4\12\5\0\1\12\6\0\20\12"+
    "\1\61\2\12\1\62\5\12\2\0\4\12\5\0\1\12"+
    "\6\0\13\12\1\63\1\12\1\64\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\65\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\66\10\12\1\67\11\12"+
    "\2\0\4\12\5\0\1\12\6\0\13\12\1\70\15\12"+
    "\2\0\4\12\5\0\1\12\6\0\2\12\1\71\6\12"+
    "\1\72\11\12\1\73\5\12\2\0\4\12\5\0\1\12"+
    "\6\0\11\12\1\74\17\12\2\0\4\12\5\0\1\12"+
    "\6\0\3\12\1\75\25\12\2\0\4\12\5\0\1\12"+
    "\6\0\4\12\1\76\24\12\2\0\4\12\2\0\1\37"+
    "\1\77\50\0\1\37\1\100\1\101\1\0\22\37\1\102"+
    "\3\37\1\103\13\37\3\104\1\37\12\0\1\105\51\0"+
    "\1\106\43\0\1\45\1\107\54\0\1\12\6\0\2\12"+
    "\1\110\26\12\2\0\4\12\5\0\1\12\6\0\6\12"+
    "\1\111\22\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\112\16\12\2\0\4\12\5\0\1\12\6\0\1\12"+
    "\1\113\27\12\2\0\4\12\5\0\1\12\6\0\11\12"+
    "\1\114\17\12\2\0\4\12\5\0\1\12\6\0\10\12"+
    "\1\115\20\12\2\0\4\12\5\0\1\12\6\0\4\12"+
    "\1\116\24\12\2\0\4\12\5\0\1\12\6\0\14\12"+
    "\1\117\14\12\2\0\4\12\5\0\1\12\6\0\15\12"+
    "\1\120\13\12\2\0\4\12\5\0\1\12\6\0\21\12"+
    "\1\121\7\12\2\0\4\12\5\0\1\12\6\0\6\12"+
    "\1\122\22\12\2\0\4\12\5\0\1\12\6\0\22\12"+
    "\1\123\6\12\2\0\4\12\5\0\1\12\6\0\4\12"+
    "\1\124\24\12\2\0\4\12\5\0\1\12\6\0\4\12"+
    "\1\125\7\12\1\126\12\12\1\127\1\12\2\0\4\12"+
    "\5\0\1\12\6\0\17\12\1\130\11\12\2\0\4\12"+
    "\5\0\1\12\6\0\5\12\1\131\23\12\2\0\4\12"+
    "\5\0\1\12\6\0\1\12\1\132\27\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\133\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\17\12\1\134\11\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\135\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\14\12\1\136\14\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\137\13\12\2\0\4\12"+
    "\46\0\1\100\6\0\1\100\1\101\117\0\1\140\17\0"+
    "\1\141\3\0\1\141\2\0\1\141\4\0\1\141\2\0"+
    "\1\141\6\0\1\141\3\0\4\141\47\0\3\142\6\0"+
    "\1\12\6\0\3\12\1\143\25\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\144\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\21\12\1\145\7\12\2\0\4\12\5\0"+
    "\1\12\6\0\11\12\1\146\17\12\2\0\4\12\5\0"+
    "\1\12\6\0\21\12\1\147\7\12\2\0\4\12\5\0"+
    "\1\12\6\0\20\12\1\150\10\12\2\0\4\12\5\0"+
    "\1\12\6\0\27\12\1\151\1\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\152\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\22\12\1\153\6\12\2\0\4\12\5\0"+
    "\1\12\6\0\3\12\1\154\25\12\2\0\4\12\5\0"+
    "\1\12\6\0\5\12\1\155\23\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\156\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\157\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\3\12\1\160\25\12\2\0\4\12\5\0"+
    "\1\12\6\0\15\12\1\161\13\12\2\0\4\12\5\0"+
    "\1\12\6\0\4\12\1\162\24\12\2\0\4\12\5\0"+
    "\1\12\6\0\6\12\1\163\22\12\2\0\4\12\5\0"+
    "\1\12\6\0\2\12\1\164\5\12\1\165\20\12\2\0"+
    "\4\12\5\0\1\12\6\0\4\12\1\166\24\12\2\0"+
    "\4\12\5\0\1\12\6\0\23\12\1\167\5\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\170\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\23\12\1\171\5\12\2\0"+
    "\4\12\5\0\1\12\6\0\5\12\1\172\23\12\2\0"+
    "\4\12\5\0\1\12\6\0\30\12\1\173\2\0\4\12"+
    "\50\0\2\174\16\0\1\37\3\0\1\37\2\0\1\37"+
    "\4\0\1\37\2\0\1\37\6\0\1\37\3\0\4\37"+
    "\47\0\3\37\6\0\1\12\6\0\4\12\1\175\24\12"+
    "\2\0\4\12\5\0\1\12\6\0\27\12\1\176\1\12"+
    "\2\0\4\12\5\0\1\12\6\0\15\12\1\177\13\12"+
    "\2\0\4\12\5\0\1\12\6\0\15\12\1\200\13\12"+
    "\2\0\4\12\5\0\1\12\6\0\2\12\1\201\26\12"+
    "\2\0\4\12\5\0\1\12\6\0\2\12\1\202\26\12"+
    "\2\0\4\12\5\0\1\12\6\0\6\12\1\203\22\12"+
    "\2\0\4\12\5\0\1\12\6\0\23\12\1\204\5\12"+
    "\2\0\4\12\5\0\1\12\6\0\4\12\1\205\24\12"+
    "\2\0\4\12\5\0\1\12\6\0\13\12\1\206\15\12"+
    "\2\0\4\12\5\0\1\12\6\0\16\12\1\207\12\12"+
    "\2\0\4\12\5\0\1\12\6\0\24\12\1\210\4\12"+
    "\2\0\4\12\5\0\1\12\6\0\1\12\1\211\27\12"+
    "\2\0\4\12\5\0\1\12\6\0\22\12\1\212\6\12"+
    "\2\0\4\12\5\0\1\12\6\0\15\12\1\213\13\12"+
    "\2\0\4\12\5\0\1\12\6\0\14\12\1\214\12\12"+
    "\1\215\1\12\2\0\4\12\5\0\1\12\6\0\4\12"+
    "\1\216\24\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\217\16\12\2\0\4\12\5\0\1\12\6\0\3\12"+
    "\1\220\25\12\2\0\4\12\5\0\1\12\6\0\11\12"+
    "\1\221\17\12\2\0\4\12\5\0\1\12\6\0\11\12"+
    "\1\222\17\12\2\0\4\12\5\0\1\12\6\0\23\12"+
    "\1\223\5\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\224\16\12\2\0\4\12\50\0\2\37\6\0\1\12"+
    "\6\0\5\12\1\225\23\12\2\0\4\12\5\0\1\12"+
    "\6\0\6\12\1\226\22\12\2\0\4\12\5\0\1\12"+
    "\6\0\4\12\1\227\24\12\2\0\4\12\5\0\1\12"+
    "\6\0\11\12\1\230\17\12\2\0\4\12\5\0\1\12"+
    "\6\0\15\12\1\231\13\12\2\0\4\12\5\0\1\12"+
    "\6\0\21\12\1\232\7\12\2\0\4\12\5\0\1\12"+
    "\6\0\1\12\1\233\27\12\2\0\4\12\5\0\1\12"+
    "\6\0\12\12\1\234\16\12\2\0\4\12\5\0\1\12"+
    "\6\0\13\12\1\235\4\12\1\236\10\12\2\0\4\12"+
    "\5\0\1\12\6\0\14\12\1\237\14\12\2\0\4\12"+
    "\5\0\1\12\6\0\14\12\1\240\14\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\241\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\11\12\1\242\17\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\243\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\30\12\1\244\2\0\4\12\5\0"+
    "\1\12\6\0\15\12\1\245\13\12\2\0\4\12\5\0"+
    "\1\12\6\0\4\12\1\246\24\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\247\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\20\12\1\250\10\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\251\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\2\12\1\252\26\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\253\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\6\12\1\254\22\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\255\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\4\12\1\256\24\12\2\0\4\12\5\0"+
    "\1\12\6\0\3\12\1\257\12\12\1\260\12\12\2\0"+
    "\4\12\5\0\1\12\6\0\4\12\1\261\24\12\2\0"+
    "\4\12\5\0\1\12\6\0\15\12\1\262\13\12\2\0"+
    "\4\12\5\0\1\12\6\0\2\12\1\263\26\12\2\0"+
    "\4\12\5\0\1\12\6\0\3\12\1\264\25\12\2\0"+
    "\4\12\5\0\1\12\6\0\23\12\1\265\5\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\266\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\15\12\1\267\13\12\2\0"+
    "\4\12\5\0\1\12\6\0\4\12\1\270\24\12\2\0"+
    "\4\12\5\0\1\12\6\0\13\12\1\271\15\12\2\0"+
    "\4\12\5\0\1\12\6\0\15\12\1\272\13\12\2\0"+
    "\4\12\5\0\1\12\6\0\12\12\1\273\16\12\2\0"+
    "\4\12\5\0\1\12\6\0\12\12\1\274\16\12\2\0"+
    "\4\12\5\0\1\12\6\0\22\12\1\275\6\12\2\0"+
    "\4\12\5\0\1\12\6\0\15\12\1\276\13\12\2\0"+
    "\4\12\5\0\1\12\6\0\12\12\1\277\16\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\300\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\20\12\1\301\10\12\2\0"+
    "\4\12\5\0\1\12\6\0\14\12\1\302\14\12\2\0"+
    "\4\12\5\0\1\12\6\0\5\12\1\303\23\12\2\0"+
    "\4\12\5\0\1\12\6\0\7\12\1\304\21\12\2\0"+
    "\4\12\5\0\1\12\6\0\20\12\1\305\10\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\306\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\10\12\1\307\20\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\310\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\6\12\1\311\22\12\2\0"+
    "\4\12\5\0\1\12\6\0\1\12\1\312\27\12\2\0"+
    "\4\12\5\0\1\12\6\0\3\12\1\313\25\12\2\0"+
    "\4\12\5\0\1\12\6\0\12\12\1\314\16\12\2\0"+
    "\4\12\5\0\1\12\6\0\21\12\1\315\7\12\2\0"+
    "\4\12\5\0\1\12\6\0\27\12\1\316\1\12\2\0"+
    "\4\12\5\0\1\12\6\0\4\12\1\317\24\12\2\0"+
    "\4\12\5\0\1\12\6\0\3\12\1\320\25\12\2\0"+
    "\4\12\5\0\1\12\6\0\7\12\1\321\21\12\2\0"+
    "\4\12\5\0\1\12\6\0\11\12\1\322\17\12\2\0"+
    "\4\12\5\0\1\12\6\0\10\12\1\323\20\12\2\0"+
    "\4\12\5\0\1\12\6\0\30\12\1\324\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\325\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\14\12\1\326\14\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\327\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\21\12\1\330\7\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\331\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\332\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\20\12\1\333\10\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\334\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\27\12\1\335\1\12\2\0\4\12"+
    "\5\0\1\12\6\0\5\12\1\336\23\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\337\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\340\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\341\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\342\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\14\12\1\343\14\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\344\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\16\12\1\345\12\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\346\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\347\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\24\12\1\350\4\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\351\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\352\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\3\12\1\353\25\12\2\0\4\12"+
    "\5\0\1\12\6\0\11\12\1\354\17\12\2\0\4\12"+
    "\5\0\1\12\6\0\22\12\1\355\6\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\356\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\357\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\360\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\10\12\1\361\20\12\2\0\4\12"+
    "\5\0\1\12\6\0\5\12\1\362\23\12\2\0\4\12"+
    "\5\0\1\12\6\0\27\12\1\363\1\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\364\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\26\12\1\365\2\12\2\0\4\12"+
    "\5\0\1\12\6\0\11\12\1\366\17\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\367\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\3\12\1\370\25\12\2\0\4\12"+
    "\5\0\1\12\6\0\22\12\1\371\6\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\372\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\22\12\1\373\6\12\2\0\4\12"+
    "\5\0\1\12\6\0\12\12\1\374\16\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\375\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\25\12\1\376\3\12\2\0\4\12"+
    "\5\0\1\12\6\0\15\12\1\377\13\12\2\0\4\12"+
    "\5\0\1\12\6\0\23\12\1\u0100\5\12\2\0\4\12"+
    "\5\0\1\12\6\0\6\12\1\u0101\22\12\2\0\4\12"+
    "\5\0\1\12\6\0\4\12\1\u0102\24\12\2\0\4\12"+
    "\5\0\1\12\6\0\30\12\1\u0103\2\0\4\12\5\0"+
    "\1\12\6\0\4\12\1\u0104\24\12\2\0\4\12\5\0"+
    "\1\12\6\0\27\12\1\u0105\1\12\2\0\4\12\5\0"+
    "\1\12\6\0\21\12\1\u0106\7\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\u0107\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\13\12\1\u0108\15\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\u0109\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\3\12\1\u010a\25\12\2\0\4\12\5\0"+
    "\1\12\6\0\10\12\1\u010b\20\12\2\0\4\12\5\0"+
    "\1\12\6\0\30\12\1\u010c\2\0\4\12\5\0\1\12"+
    "\6\0\12\12\1\u010d\16\12\2\0\4\12\5\0\1\12"+
    "\6\0\12\12\1\u010e\16\12\2\0\4\12\5\0\1\12"+
    "\6\0\15\12\1\u010f\13\12\2\0\4\12\5\0\1\12"+
    "\6\0\12\12\1\u0110\16\12\2\0\4\12\5\0\1\12"+
    "\6\0\15\12\1\u0111\13\12\2\0\4\12\5\0\1\12"+
    "\6\0\4\12\1\u0112\24\12\2\0\4\12\5\0\1\12"+
    "\6\0\25\12\1\u0113\3\12\2\0\4\12\5\0\1\12"+
    "\6\0\11\12\1\u0114\17\12\2\0\4\12\5\0\1\12"+
    "\6\0\6\12\1\u0115\22\12\2\0\4\12\5\0\1\12"+
    "\6\0\13\12\1\u0116\15\12\2\0\4\12\5\0\1\12"+
    "\6\0\15\12\1\u0117\13\12\2\0\4\12\5\0\1\12"+
    "\6\0\12\12\1\u0118\16\12\2\0\4\12\5\0\1\12"+
    "\6\0\21\12\1\u0119\7\12\2\0\4\12\5\0\1\12"+
    "\6\0\30\12\1\u011a\2\0\4\12\5\0\1\12\6\0"+
    "\23\12\1\u011b\5\12\2\0\4\12\5\0\1\12\6\0"+
    "\15\12\1\u011c\13\12\2\0\4\12\5\0\1\12\6\0"+
    "\13\12\1\u011d\15\12\2\0\4\12\5\0\1\12\6\0"+
    "\6\12\1\u011e\22\12\2\0\4\12\5\0\1\12\6\0"+
    "\4\12\1\u011f\24\12\2\0\4\12\5\0\1\12\6\0"+
    "\14\12\1\u0120\14\12\2\0\4\12\5\0\1\12\6\0"+
    "\5\12\1\u0121\23\12\2\0\4\12\5\0\1\12\6\0"+
    "\2\12\1\u0122\26\12\2\0\4\12\5\0\1\12\6\0"+
    "\12\12\1\u0123\16\12\2\0\4\12\5\0\1\12\6\0"+
    "\23\12\1\u0124\5\12\2\0\4\12\5\0\1\12\6\0"+
    "\30\12\1\u0125\2\0\4\12\5\0\1\12\6\0\2\12"+
    "\1\u0126\26\12\2\0\4\12\5\0\1\12\6\0\5\12"+
    "\1\u0127\23\12\2\0\4\12\5\0\1\12\6\0\3\12"+
    "\1\u0128\25\12\2\0\4\12\5\0\1\12\6\0\10\12"+
    "\1\u0129\20\12\2\0\4\12\5\0\1\12\6\0\1\12"+
    "\1\u012a\27\12\2\0\4\12\5\0\1\12\6\0\3\12"+
    "\1\u012b\25\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\u012c\16\12\2\0\4\12\5\0\1\12\6\0\21\12"+
    "\1\u012d\7\12\2\0\4\12\5\0\1\12\6\0\10\12"+
    "\1\u012e\20\12\2\0\4\12\5\0\1\12\6\0\1\12"+
    "\1\u012f\27\12\2\0\4\12\5\0\1\12\6\0\11\12"+
    "\1\u0130\17\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\u0131\16\12\2\0\4\12\5\0\1\12\6\0\14\12"+
    "\1\u0132\14\12\2\0\4\12\5\0\1\12\6\0\6\12"+
    "\1\u0133\22\12\2\0\4\12\5\0\1\12\6\0\23\12"+
    "\1\u0134\5\12\2\0\4\12\5\0\1\12\6\0\11\12"+
    "\1\u0135\17\12\2\0\4\12\5\0\1\12\6\0\12\12"+
    "\1\u0136\16\12\2\0\4\12\5\0\1\12\6\0\6\12"+
    "\1\u0137\22\12\2\0\4\12\5\0\1\12\6\0\30\12"+
    "\1\u0138\2\0\4\12\5\0\1\12\6\0\3\12\1\u0139"+
    "\25\12\2\0\4\12\5\0\1\12\6\0\12\12\1\u013a"+
    "\16\12\2\0\4\12\5\0\1\12\6\0\15\12\1\u013b"+
    "\13\12\2\0\4\12\5\0\1\12\6\0\15\12\1\u013c"+
    "\13\12\2\0\4\12\5\0\1\12\6\0\6\12\1\u013d"+
    "\22\12\2\0\4\12\5\0\1\12\6\0\22\12\1\u013e"+
    "\6\12\2\0\4\12\5\0\1\12\6\0\11\12\1\u013f"+
    "\17\12\2\0\4\12\5\0\1\12\6\0\11\12\1\u0140"+
    "\17\12\2\0\4\12\5\0\1\12\6\0\5\12\1\u0141"+
    "\23\12\2\0\4\12\5\0\1\12\6\0\23\12\1\u0142"+
    "\5\12\2\0\4\12\5\0\1\12\6\0\3\12\1\u0143"+
    "\25\12\2\0\4\12\5\0\1\12\6\0\20\12\1\u0144"+
    "\10\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u0145"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\4\12\1\u0146"+
    "\24\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u0147"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\25\12\1\u0148"+
    "\3\12\2\0\4\12\5\0\1\12\6\0\23\12\1\u0149"+
    "\5\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u014a"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\12\12\1\u014b"+
    "\16\12\2\0\4\12\5\0\1\12\6\0\3\12\1\u014c"+
    "\25\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u014d"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\22\12\1\u014e"+
    "\6\12\2\0\4\12\5\0\1\12\6\0\7\12\1\u014f"+
    "\21\12\2\0\4\12\5\0\1\12\6\0\14\12\1\u0150"+
    "\14\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u0151"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u0152"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\5\12\1\u0153"+
    "\23\12\2\0\4\12\5\0\1\12\6\0\14\12\1\u0154"+
    "\14\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u0155"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\21\12\1\u0156"+
    "\7\12\2\0\4\12\5\0\1\12\6\0\14\12\1\u0157"+
    "\14\12\2\0\4\12\5\0\1\12\6\0\15\12\1\u0158"+
    "\13\12\2\0\4\12\5\0\1\12\6\0\20\12\1\u0159"+
    "\10\12\2\0\4\12\5\0\1\12\6\0\21\12\1\u015a"+
    "\7\12\2\0\4\12\5\0\1\12\6\0\3\12\1\u015b"+
    "\25\12\2\0\4\12\5\0\1\12\6\0\3\12\1\u015c"+
    "\25\12\2\0\4\12\5\0\1\12\6\0\10\12\1\u015d"+
    "\20\12\2\0\4\12\5\0\1\12\6\0\13\12\1\u015e"+
    "\15\12\2\0\4\12\5\0\1\12\6\0\12\12\1\u015f"+
    "\16\12\2\0\4\12\5\0\1\12\6\0\14\12\1\u0160"+
    "\14\12\2\0\4\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\2\1\3\11\1\1\1\11\17\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\2\11\26\1\1\0"+
    "\1\1\1\0\3\1\2\11\1\0\30\1\3\0\31\1"+
    "\1\0\344\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private DuneTypes types;
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;
  private int parenDepth;

  public DuneLexer() {}

  // Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  // Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DuneLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING;
            }  // fall though
            case 353: break;
            case IN_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 354: break;
            case IN_SEXPR_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 355: break;
            case IN_SL_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            }  // fall though
            case 356: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 47: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 4: 
            { return types.ATOM;
            } 
            // fall through
          case 50: break;
          case 5: 
            { return types.LPAREN;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return types.RPAREN;
            } 
            // fall through
          case 52: break;
          case 7: 
            { yybegin(IN_STRING); tokenStart();
            } 
            // fall through
          case 53: break;
          case 8: 
            { yybegin(IN_SL_COMMENT); tokenStart();
            } 
            // fall through
          case 54: break;
          case 9: 
            { 
            } 
            // fall through
          case 55: break;
          case 10: 
            { yybegin(INITIAL); tokenEnd(); return types.STRING;
            } 
            // fall through
          case 56: break;
          case 11: 
            { yybegin(INITIAL); tokenEnd(); return types.COMMENT;
            } 
            // fall through
          case 57: break;
          case 12: 
            { yybegin(IN_ML_COMMENT); commentDepth = 1; tokenStart();
            } 
            // fall through
          case 58: break;
          case 13: 
            { yybegin(IN_SEXPR_COMMENT); parenDepth = 0; tokenStart();
            } 
            // fall through
          case 59: break;
          case 14: 
            { commentDepth += 1;
            } 
            // fall through
          case 60: break;
          case 15: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.COMMENT; }
            } 
            // fall through
          case 61: break;
          case 16: 
            { return types.NAME;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return types.KIND;
            } 
            // fall through
          case 63: break;
          case 18: 
            { return types.MODES;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return types.FLAGS;
            } 
            // fall through
          case 65: break;
          case 20: 
            { return types.LIBRARY;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return types.C_NAMES;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return types.C_FLAGS;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return types.MODULES;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return types.WRAPPED;
            } 
            // fall through
          case 70: break;
          case 25: 
            { return types.SYNOPSIS;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return types.OPTIONAL;
            } 
            // fall through
          case 72: break;
          case 27: 
            { return types.LIBRARIES;
            } 
            // fall through
          case 73: break;
          case 28: 
            { return types.CXX_NAMES;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return types.CXX_FLAGS;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return types.EXECUTABLE;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return types.NO_DYNLINK;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return types.PREPROCESS;
            } 
            // fall through
          case 78: break;
          case 33: 
            { return types.JS_OF_OCAML;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return types.PUBLIC_NAME;
            } 
            // fall through
          case 80: break;
          case 35: 
            { return types.VIRTUAL_DEPS;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return types.OCAMLC_FLAGS;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return types.LIBRARY_FLAGS;
            } 
            // fall through
          case 83: break;
          case 38: 
            { return types.VERSION;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return types.OCAMLOPT_FLAGS;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return types.C_LIBRARY_FLAGS;
            } 
            // fall through
          case 86: break;
          case 41: 
            { return types.INSTALL_C_HEADERS;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return types.PREPROCESSOR_DEPS;
            } 
            // fall through
          case 88: break;
          case 43: 
            { return types.PPX_RUNTIME_LIBRARIES;
            } 
            // fall through
          case 89: break;
          case 44: 
            { return types.SELF_BUILD_STUBS_ARCHIVE;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return types.ALLOW_OVERLAPPING_DEPENDENCIES;
            } 
            // fall through
          case 91: break;
          case 46: 
            { return types.MODULES_WITHOUT_IMPLEMENTATION;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
