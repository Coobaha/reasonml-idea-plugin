/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.dune;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Dune.flex</tt>
 */
public class DuneLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\42\1\1\1\47\1\3\1\2\22\0\1\42\1\0\1\40\4\0\1\4\1\5\1\6\6\0\4\44\4"+
    "\45\2\43\7\0\6\46\24\4\1\0\1\41\2\0\1\15\1\0\1\24\1\10\1\27\1\14\1\17\1\36"+
    "\1\37\1\34\1\12\1\7\1\35\1\13\1\31\1\23\1\22\1\32\1\4\1\20\1\21\1\30\1\11"+
    "\1\16\1\33\1\26\1\25\1\4\12\0\1\47\242\0\2\47\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\17\4"+
    "\1\7\1\2\1\10\1\7\26\4\1\0\1\7\1\0"+
    "\3\7\30\4\3\0\13\4\1\11\13\4\1\12\1\4"+
    "\1\0\22\4\1\13\4\4\1\14\33\4\1\15\12\4"+
    "\1\16\1\17\2\4\1\20\3\4\1\21\10\4\1\22"+
    "\2\4\1\23\14\4\1\24\11\4\1\25\1\26\11\4"+
    "\1\27\3\4\1\30\4\4\1\31\2\4\1\32\11\4"+
    "\1\33\5\4\1\34\2\4\1\35\7\4\1\36\7\4"+
    "\1\37\2\4\1\40\10\4\1\41\11\4\1\42\3\4"+
    "\1\43\20\4\1\44\6\4\1\45\14\4\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\240\0\310\0\360"+
    "\0\240\0\240\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\240\0\u0370\0\240\0\u0398\0\u03c0\0\u03e8\0\u0410"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690"+
    "\0\u06b8\0\u06e0\0\u0708\0\u0370\0\u0730\0\u0758\0\u0780\0\u07a8"+
    "\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8"+
    "\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68"+
    "\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\360"+
    "\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\360\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018"+
    "\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158"+
    "\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298"+
    "\0\360\0\u12c0\0\u12e8\0\u1310\0\u1338\0\360\0\u1360\0\u1388"+
    "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8"+
    "\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608"+
    "\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748"+
    "\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888"+
    "\0\u18b0\0\u18d8\0\u1900\0\u1928\0\360\0\360\0\u1950\0\u1978"+
    "\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\360\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\360\0\u1b80\0\u1ba8"+
    "\0\360\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0"+
    "\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\360\0\u1db0\0\u1dd8"+
    "\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\360"+
    "\0\360\0\u1f18\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008"+
    "\0\u2030\0\u2058\0\360\0\u2080\0\u20a8\0\u20d0\0\360\0\u20f8"+
    "\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8\0\360\0\u2210"+
    "\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u2350"+
    "\0\360\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\360\0\u2440"+
    "\0\u2468\0\360\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558"+
    "\0\u2580\0\360\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670"+
    "\0\u2698\0\360\0\u26c0\0\u26e8\0\360\0\u2710\0\u2738\0\u2760"+
    "\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\360\0\u2850\0\u2878"+
    "\0\u28a0\0\u28c8\0\u28f0\0\u2918\0\u2940\0\u2968\0\u2990\0\360"+
    "\0\u29b8\0\u29e0\0\u2a08\0\360\0\u2a30\0\u2a58\0\u2a80\0\u2aa8"+
    "\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98\0\u2bc0\0\u2be8"+
    "\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\360\0\u2cb0\0\u2cd8\0\u2d00"+
    "\0\u2d28\0\u2d50\0\u2d78\0\360\0\u2da0\0\u2dc8\0\u2df0\0\u2e18"+
    "\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58"+
    "\0\360\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\50\5\51\6\3\7\1\10\1\11\1\12\1\13\2\10"+
    "\1\14\1\15\2\10\1\16\1\17\1\10\1\20\1\21"+
    "\1\22\1\23\2\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\10\1\30\1\31\1\10\2\6\1\7\4\10\1\6"+
    "\2\32\1\33\1\6\34\32\1\34\1\35\5\32\1\6"+
    "\51\0\3\7\36\0\1\7\11\0\1\10\2\0\31\10"+
    "\3\0\4\10\5\0\1\10\2\0\1\10\1\36\10\10"+
    "\1\37\16\10\3\0\4\10\5\0\1\10\2\0\14\10"+
    "\1\40\14\10\3\0\4\10\5\0\1\10\2\0\3\10"+
    "\1\41\25\10\3\0\4\10\5\0\1\10\2\0\3\10"+
    "\1\42\25\10\3\0\4\10\5\0\1\10\2\0\17\10"+
    "\1\43\11\10\3\0\4\10\5\0\1\10\2\0\10\10"+
    "\1\44\5\10\1\45\12\10\3\0\4\10\5\0\1\10"+
    "\2\0\20\10\1\46\2\10\1\47\5\10\3\0\4\10"+
    "\5\0\1\10\2\0\13\10\1\50\1\10\1\51\13\10"+
    "\3\0\4\10\5\0\1\10\2\0\4\10\1\52\24\10"+
    "\3\0\4\10\5\0\1\10\2\0\6\10\1\53\10\10"+
    "\1\54\11\10\3\0\4\10\5\0\1\10\2\0\13\10"+
    "\1\55\15\10\3\0\4\10\5\0\1\10\2\0\2\10"+
    "\1\56\6\10\1\57\11\10\1\60\5\10\3\0\4\10"+
    "\5\0\1\10\2\0\11\10\1\61\17\10\3\0\4\10"+
    "\5\0\1\10\2\0\3\10\1\62\25\10\3\0\4\10"+
    "\5\0\1\10\2\0\4\10\1\63\24\10\3\0\4\10"+
    "\2\0\1\32\1\64\45\0\1\32\1\65\1\66\1\0"+
    "\16\32\1\67\3\32\1\70\14\32\3\71\1\32\5\0"+
    "\1\10\2\0\2\10\1\72\26\10\3\0\4\10\5\0"+
    "\1\10\2\0\6\10\1\73\22\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\74\16\10\3\0\4\10\5\0"+
    "\1\10\2\0\1\10\1\75\27\10\3\0\4\10\5\0"+
    "\1\10\2\0\11\10\1\76\17\10\3\0\4\10\5\0"+
    "\1\10\2\0\10\10\1\77\20\10\3\0\4\10\5\0"+
    "\1\10\2\0\4\10\1\100\24\10\3\0\4\10\5\0"+
    "\1\10\2\0\14\10\1\101\14\10\3\0\4\10\5\0"+
    "\1\10\2\0\15\10\1\102\13\10\3\0\4\10\5\0"+
    "\1\10\2\0\21\10\1\103\7\10\3\0\4\10\5\0"+
    "\1\10\2\0\6\10\1\104\22\10\3\0\4\10\5\0"+
    "\1\10\2\0\22\10\1\105\6\10\3\0\4\10\5\0"+
    "\1\10\2\0\4\10\1\106\24\10\3\0\4\10\5\0"+
    "\1\10\2\0\4\10\1\107\7\10\1\110\12\10\1\111"+
    "\1\10\3\0\4\10\5\0\1\10\2\0\17\10\1\112"+
    "\11\10\3\0\4\10\5\0\1\10\2\0\5\10\1\113"+
    "\23\10\3\0\4\10\5\0\1\10\2\0\1\10\1\114"+
    "\27\10\3\0\4\10\5\0\1\10\2\0\10\10\1\115"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\17\10\1\116"+
    "\11\10\3\0\4\10\5\0\1\10\2\0\15\10\1\117"+
    "\13\10\3\0\4\10\5\0\1\10\2\0\14\10\1\120"+
    "\14\10\3\0\4\10\5\0\1\10\2\0\15\10\1\121"+
    "\13\10\3\0\4\10\43\0\1\65\6\0\1\65\1\66"+
    "\111\0\1\122\13\0\1\123\3\0\1\123\2\0\1\123"+
    "\4\0\1\123\2\0\1\123\6\0\1\123\4\0\4\123"+
    "\44\0\3\124\6\0\1\10\2\0\3\10\1\125\25\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\126\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\21\10\1\127\7\10"+
    "\3\0\4\10\5\0\1\10\2\0\11\10\1\130\17\10"+
    "\3\0\4\10\5\0\1\10\2\0\21\10\1\131\7\10"+
    "\3\0\4\10\5\0\1\10\2\0\20\10\1\132\10\10"+
    "\3\0\4\10\5\0\1\10\2\0\27\10\1\133\1\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\134\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\22\10\1\135\6\10"+
    "\3\0\4\10\5\0\1\10\2\0\3\10\1\136\25\10"+
    "\3\0\4\10\5\0\1\10\2\0\5\10\1\137\23\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\140\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\141\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\3\10\1\142\25\10"+
    "\3\0\4\10\5\0\1\10\2\0\15\10\1\143\13\10"+
    "\3\0\4\10\5\0\1\10\2\0\4\10\1\144\24\10"+
    "\3\0\4\10\5\0\1\10\2\0\6\10\1\145\22\10"+
    "\3\0\4\10\5\0\1\10\2\0\2\10\1\146\5\10"+
    "\1\147\20\10\3\0\4\10\5\0\1\10\2\0\4\10"+
    "\1\150\24\10\3\0\4\10\5\0\1\10\2\0\23\10"+
    "\1\151\5\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\152\22\10\3\0\4\10\5\0\1\10\2\0\23\10"+
    "\1\153\5\10\3\0\4\10\5\0\1\10\2\0\5\10"+
    "\1\154\23\10\3\0\4\10\5\0\1\10\2\0\30\10"+
    "\1\155\3\0\4\10\45\0\2\156\12\0\1\32\3\0"+
    "\1\32\2\0\1\32\4\0\1\32\2\0\1\32\6\0"+
    "\1\32\4\0\4\32\44\0\3\32\6\0\1\10\2\0"+
    "\4\10\1\157\24\10\3\0\4\10\5\0\1\10\2\0"+
    "\27\10\1\160\1\10\3\0\4\10\5\0\1\10\2\0"+
    "\15\10\1\161\13\10\3\0\4\10\5\0\1\10\2\0"+
    "\15\10\1\162\13\10\3\0\4\10\5\0\1\10\2\0"+
    "\2\10\1\163\26\10\3\0\4\10\5\0\1\10\2\0"+
    "\2\10\1\164\26\10\3\0\4\10\5\0\1\10\2\0"+
    "\6\10\1\165\22\10\3\0\4\10\5\0\1\10\2\0"+
    "\23\10\1\166\5\10\3\0\4\10\5\0\1\10\2\0"+
    "\4\10\1\167\24\10\3\0\4\10\5\0\1\10\2\0"+
    "\13\10\1\170\15\10\3\0\4\10\5\0\1\10\2\0"+
    "\16\10\1\171\12\10\3\0\4\10\5\0\1\10\2\0"+
    "\24\10\1\172\4\10\3\0\4\10\5\0\1\10\2\0"+
    "\1\10\1\173\27\10\3\0\4\10\5\0\1\10\2\0"+
    "\22\10\1\174\6\10\3\0\4\10\5\0\1\10\2\0"+
    "\15\10\1\175\13\10\3\0\4\10\5\0\1\10\2\0"+
    "\14\10\1\176\12\10\1\177\1\10\3\0\4\10\5\0"+
    "\1\10\2\0\4\10\1\200\24\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\201\16\10\3\0\4\10\5\0"+
    "\1\10\2\0\3\10\1\202\25\10\3\0\4\10\5\0"+
    "\1\10\2\0\11\10\1\203\17\10\3\0\4\10\5\0"+
    "\1\10\2\0\11\10\1\204\17\10\3\0\4\10\5\0"+
    "\1\10\2\0\23\10\1\205\5\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\206\16\10\3\0\4\10\45\0"+
    "\2\32\6\0\1\10\2\0\5\10\1\207\23\10\3\0"+
    "\4\10\5\0\1\10\2\0\6\10\1\210\22\10\3\0"+
    "\4\10\5\0\1\10\2\0\4\10\1\211\24\10\3\0"+
    "\4\10\5\0\1\10\2\0\11\10\1\212\17\10\3\0"+
    "\4\10\5\0\1\10\2\0\15\10\1\213\13\10\3\0"+
    "\4\10\5\0\1\10\2\0\21\10\1\214\7\10\3\0"+
    "\4\10\5\0\1\10\2\0\1\10\1\215\27\10\3\0"+
    "\4\10\5\0\1\10\2\0\12\10\1\216\16\10\3\0"+
    "\4\10\5\0\1\10\2\0\13\10\1\217\4\10\1\220"+
    "\10\10\3\0\4\10\5\0\1\10\2\0\14\10\1\221"+
    "\14\10\3\0\4\10\5\0\1\10\2\0\14\10\1\222"+
    "\14\10\3\0\4\10\5\0\1\10\2\0\6\10\1\223"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\11\10\1\224"+
    "\17\10\3\0\4\10\5\0\1\10\2\0\10\10\1\225"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\30\10\1\226"+
    "\3\0\4\10\5\0\1\10\2\0\15\10\1\227\13\10"+
    "\3\0\4\10\5\0\1\10\2\0\4\10\1\230\24\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\231\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\20\10\1\232\10\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\233\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\2\10\1\234\26\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\235\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\6\10\1\236\22\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\237\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\4\10\1\240\24\10"+
    "\3\0\4\10\5\0\1\10\2\0\3\10\1\241\12\10"+
    "\1\242\12\10\3\0\4\10\5\0\1\10\2\0\4\10"+
    "\1\243\24\10\3\0\4\10\5\0\1\10\2\0\15\10"+
    "\1\244\13\10\3\0\4\10\5\0\1\10\2\0\2\10"+
    "\1\245\26\10\3\0\4\10\5\0\1\10\2\0\3\10"+
    "\1\246\25\10\3\0\4\10\5\0\1\10\2\0\23\10"+
    "\1\247\5\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\250\22\10\3\0\4\10\5\0\1\10\2\0\15\10"+
    "\1\251\13\10\3\0\4\10\5\0\1\10\2\0\4\10"+
    "\1\252\24\10\3\0\4\10\5\0\1\10\2\0\13\10"+
    "\1\253\15\10\3\0\4\10\5\0\1\10\2\0\15\10"+
    "\1\254\13\10\3\0\4\10\5\0\1\10\2\0\12\10"+
    "\1\255\16\10\3\0\4\10\5\0\1\10\2\0\12\10"+
    "\1\256\16\10\3\0\4\10\5\0\1\10\2\0\22\10"+
    "\1\257\6\10\3\0\4\10\5\0\1\10\2\0\15\10"+
    "\1\260\13\10\3\0\4\10\5\0\1\10\2\0\12\10"+
    "\1\261\16\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\262\22\10\3\0\4\10\5\0\1\10\2\0\20\10"+
    "\1\263\10\10\3\0\4\10\5\0\1\10\2\0\14\10"+
    "\1\264\14\10\3\0\4\10\5\0\1\10\2\0\5\10"+
    "\1\265\23\10\3\0\4\10\5\0\1\10\2\0\7\10"+
    "\1\266\21\10\3\0\4\10\5\0\1\10\2\0\20\10"+
    "\1\267\10\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\270\22\10\3\0\4\10\5\0\1\10\2\0\10\10"+
    "\1\271\20\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\272\22\10\3\0\4\10\5\0\1\10\2\0\6\10"+
    "\1\273\22\10\3\0\4\10\5\0\1\10\2\0\1\10"+
    "\1\274\27\10\3\0\4\10\5\0\1\10\2\0\3\10"+
    "\1\275\25\10\3\0\4\10\5\0\1\10\2\0\12\10"+
    "\1\276\16\10\3\0\4\10\5\0\1\10\2\0\21\10"+
    "\1\277\7\10\3\0\4\10\5\0\1\10\2\0\27\10"+
    "\1\300\1\10\3\0\4\10\5\0\1\10\2\0\4\10"+
    "\1\301\24\10\3\0\4\10\5\0\1\10\2\0\3\10"+
    "\1\302\25\10\3\0\4\10\5\0\1\10\2\0\7\10"+
    "\1\303\21\10\3\0\4\10\5\0\1\10\2\0\11\10"+
    "\1\304\17\10\3\0\4\10\5\0\1\10\2\0\10\10"+
    "\1\305\20\10\3\0\4\10\5\0\1\10\2\0\30\10"+
    "\1\306\3\0\4\10\5\0\1\10\2\0\6\10\1\307"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\14\10\1\310"+
    "\14\10\3\0\4\10\5\0\1\10\2\0\10\10\1\311"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\21\10\1\312"+
    "\7\10\3\0\4\10\5\0\1\10\2\0\10\10\1\313"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\15\10\1\314"+
    "\13\10\3\0\4\10\5\0\1\10\2\0\20\10\1\315"+
    "\10\10\3\0\4\10\5\0\1\10\2\0\12\10\1\316"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\27\10\1\317"+
    "\1\10\3\0\4\10\5\0\1\10\2\0\5\10\1\320"+
    "\23\10\3\0\4\10\5\0\1\10\2\0\4\10\1\321"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\4\10\1\322"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\6\10\1\323"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\4\10\1\324"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\14\10\1\325"+
    "\14\10\3\0\4\10\5\0\1\10\2\0\10\10\1\326"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\16\10\1\327"+
    "\12\10\3\0\4\10\5\0\1\10\2\0\12\10\1\330"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\12\10\1\331"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\24\10\1\332"+
    "\4\10\3\0\4\10\5\0\1\10\2\0\15\10\1\333"+
    "\13\10\3\0\4\10\5\0\1\10\2\0\12\10\1\334"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\3\10\1\335"+
    "\25\10\3\0\4\10\5\0\1\10\2\0\11\10\1\336"+
    "\17\10\3\0\4\10\5\0\1\10\2\0\22\10\1\337"+
    "\6\10\3\0\4\10\5\0\1\10\2\0\6\10\1\340"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\4\10\1\341"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\10\10\1\342"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\10\10\1\343"+
    "\20\10\3\0\4\10\5\0\1\10\2\0\5\10\1\344"+
    "\23\10\3\0\4\10\5\0\1\10\2\0\27\10\1\345"+
    "\1\10\3\0\4\10\5\0\1\10\2\0\15\10\1\346"+
    "\13\10\3\0\4\10\5\0\1\10\2\0\26\10\1\347"+
    "\2\10\3\0\4\10\5\0\1\10\2\0\11\10\1\350"+
    "\17\10\3\0\4\10\5\0\1\10\2\0\6\10\1\351"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\3\10\1\352"+
    "\25\10\3\0\4\10\5\0\1\10\2\0\22\10\1\353"+
    "\6\10\3\0\4\10\5\0\1\10\2\0\12\10\1\354"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\22\10\1\355"+
    "\6\10\3\0\4\10\5\0\1\10\2\0\12\10\1\356"+
    "\16\10\3\0\4\10\5\0\1\10\2\0\4\10\1\357"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\25\10\1\360"+
    "\3\10\3\0\4\10\5\0\1\10\2\0\15\10\1\361"+
    "\13\10\3\0\4\10\5\0\1\10\2\0\23\10\1\362"+
    "\5\10\3\0\4\10\5\0\1\10\2\0\6\10\1\363"+
    "\22\10\3\0\4\10\5\0\1\10\2\0\4\10\1\364"+
    "\24\10\3\0\4\10\5\0\1\10\2\0\30\10\1\365"+
    "\3\0\4\10\5\0\1\10\2\0\4\10\1\366\24\10"+
    "\3\0\4\10\5\0\1\10\2\0\27\10\1\367\1\10"+
    "\3\0\4\10\5\0\1\10\2\0\21\10\1\370\7\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\371\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\13\10\1\372\15\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\373\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\3\10\1\374\25\10"+
    "\3\0\4\10\5\0\1\10\2\0\10\10\1\375\20\10"+
    "\3\0\4\10\5\0\1\10\2\0\30\10\1\376\3\0"+
    "\4\10\5\0\1\10\2\0\12\10\1\377\16\10\3\0"+
    "\4\10\5\0\1\10\2\0\12\10\1\u0100\16\10\3\0"+
    "\4\10\5\0\1\10\2\0\15\10\1\u0101\13\10\3\0"+
    "\4\10\5\0\1\10\2\0\12\10\1\u0102\16\10\3\0"+
    "\4\10\5\0\1\10\2\0\15\10\1\u0103\13\10\3\0"+
    "\4\10\5\0\1\10\2\0\4\10\1\u0104\24\10\3\0"+
    "\4\10\5\0\1\10\2\0\25\10\1\u0105\3\10\3\0"+
    "\4\10\5\0\1\10\2\0\11\10\1\u0106\17\10\3\0"+
    "\4\10\5\0\1\10\2\0\6\10\1\u0107\22\10\3\0"+
    "\4\10\5\0\1\10\2\0\13\10\1\u0108\15\10\3\0"+
    "\4\10\5\0\1\10\2\0\15\10\1\u0109\13\10\3\0"+
    "\4\10\5\0\1\10\2\0\12\10\1\u010a\16\10\3\0"+
    "\4\10\5\0\1\10\2\0\21\10\1\u010b\7\10\3\0"+
    "\4\10\5\0\1\10\2\0\30\10\1\u010c\3\0\4\10"+
    "\5\0\1\10\2\0\23\10\1\u010d\5\10\3\0\4\10"+
    "\5\0\1\10\2\0\15\10\1\u010e\13\10\3\0\4\10"+
    "\5\0\1\10\2\0\13\10\1\u010f\15\10\3\0\4\10"+
    "\5\0\1\10\2\0\6\10\1\u0110\22\10\3\0\4\10"+
    "\5\0\1\10\2\0\4\10\1\u0111\24\10\3\0\4\10"+
    "\5\0\1\10\2\0\14\10\1\u0112\14\10\3\0\4\10"+
    "\5\0\1\10\2\0\5\10\1\u0113\23\10\3\0\4\10"+
    "\5\0\1\10\2\0\2\10\1\u0114\26\10\3\0\4\10"+
    "\5\0\1\10\2\0\12\10\1\u0115\16\10\3\0\4\10"+
    "\5\0\1\10\2\0\23\10\1\u0116\5\10\3\0\4\10"+
    "\5\0\1\10\2\0\30\10\1\u0117\3\0\4\10\5\0"+
    "\1\10\2\0\2\10\1\u0118\26\10\3\0\4\10\5\0"+
    "\1\10\2\0\5\10\1\u0119\23\10\3\0\4\10\5\0"+
    "\1\10\2\0\3\10\1\u011a\25\10\3\0\4\10\5\0"+
    "\1\10\2\0\10\10\1\u011b\20\10\3\0\4\10\5\0"+
    "\1\10\2\0\1\10\1\u011c\27\10\3\0\4\10\5\0"+
    "\1\10\2\0\3\10\1\u011d\25\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\u011e\16\10\3\0\4\10\5\0"+
    "\1\10\2\0\21\10\1\u011f\7\10\3\0\4\10\5\0"+
    "\1\10\2\0\10\10\1\u0120\20\10\3\0\4\10\5\0"+
    "\1\10\2\0\1\10\1\u0121\27\10\3\0\4\10\5\0"+
    "\1\10\2\0\11\10\1\u0122\17\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\u0123\16\10\3\0\4\10\5\0"+
    "\1\10\2\0\14\10\1\u0124\14\10\3\0\4\10\5\0"+
    "\1\10\2\0\6\10\1\u0125\22\10\3\0\4\10\5\0"+
    "\1\10\2\0\23\10\1\u0126\5\10\3\0\4\10\5\0"+
    "\1\10\2\0\11\10\1\u0127\17\10\3\0\4\10\5\0"+
    "\1\10\2\0\12\10\1\u0128\16\10\3\0\4\10\5\0"+
    "\1\10\2\0\6\10\1\u0129\22\10\3\0\4\10\5\0"+
    "\1\10\2\0\30\10\1\u012a\3\0\4\10\5\0\1\10"+
    "\2\0\3\10\1\u012b\25\10\3\0\4\10\5\0\1\10"+
    "\2\0\12\10\1\u012c\16\10\3\0\4\10\5\0\1\10"+
    "\2\0\15\10\1\u012d\13\10\3\0\4\10\5\0\1\10"+
    "\2\0\15\10\1\u012e\13\10\3\0\4\10\5\0\1\10"+
    "\2\0\6\10\1\u012f\22\10\3\0\4\10\5\0\1\10"+
    "\2\0\22\10\1\u0130\6\10\3\0\4\10\5\0\1\10"+
    "\2\0\11\10\1\u0131\17\10\3\0\4\10\5\0\1\10"+
    "\2\0\11\10\1\u0132\17\10\3\0\4\10\5\0\1\10"+
    "\2\0\5\10\1\u0133\23\10\3\0\4\10\5\0\1\10"+
    "\2\0\23\10\1\u0134\5\10\3\0\4\10\5\0\1\10"+
    "\2\0\3\10\1\u0135\25\10\3\0\4\10\5\0\1\10"+
    "\2\0\20\10\1\u0136\10\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u0137\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\4\10\1\u0138\24\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u0139\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\25\10\1\u013a\3\10\3\0\4\10\5\0\1\10"+
    "\2\0\23\10\1\u013b\5\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u013c\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\12\10\1\u013d\16\10\3\0\4\10\5\0\1\10"+
    "\2\0\3\10\1\u013e\25\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u013f\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\22\10\1\u0140\6\10\3\0\4\10\5\0\1\10"+
    "\2\0\7\10\1\u0141\21\10\3\0\4\10\5\0\1\10"+
    "\2\0\14\10\1\u0142\14\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u0143\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u0144\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\5\10\1\u0145\23\10\3\0\4\10\5\0\1\10"+
    "\2\0\14\10\1\u0146\14\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u0147\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\21\10\1\u0148\7\10\3\0\4\10\5\0\1\10"+
    "\2\0\14\10\1\u0149\14\10\3\0\4\10\5\0\1\10"+
    "\2\0\15\10\1\u014a\13\10\3\0\4\10\5\0\1\10"+
    "\2\0\20\10\1\u014b\10\10\3\0\4\10\5\0\1\10"+
    "\2\0\21\10\1\u014c\7\10\3\0\4\10\5\0\1\10"+
    "\2\0\3\10\1\u014d\25\10\3\0\4\10\5\0\1\10"+
    "\2\0\3\10\1\u014e\25\10\3\0\4\10\5\0\1\10"+
    "\2\0\10\10\1\u014f\20\10\3\0\4\10\5\0\1\10"+
    "\2\0\13\10\1\u0150\15\10\3\0\4\10\5\0\1\10"+
    "\2\0\12\10\1\u0151\16\10\3\0\4\10\5\0\1\10"+
    "\2\0\14\10\1\u0152\14\10\3\0\4\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\2\11\17\1\1\11\1\1\1\11"+
    "\27\1\1\0\1\1\1\0\33\1\3\0\31\1\1\0"+
    "\344\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private DuneTypes types;
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;

  public DuneLexer() {}

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DuneLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING;
            }  // fall though
            case 339: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 40: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return types.ATOM;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return types.LPAREN;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return types.RPAREN;
            } 
            // fall through
          case 45: break;
          case 7: 
            { 
            } 
            // fall through
          case 46: break;
          case 8: 
            { yybegin(INITIAL); tokenEnd(); return types.STRING;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return types.NAME;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return types.KIND;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return types.MODES;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return types.FLAGS;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return types.LIBRARY;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return types.C_NAMES;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return types.C_FLAGS;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return types.MODULES;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return types.WRAPPED;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return types.SYNOPSIS;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return types.OPTIONAL;
            } 
            // fall through
          case 58: break;
          case 20: 
            { return types.LIBRARIES;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return types.CXX_NAMES;
            } 
            // fall through
          case 60: break;
          case 22: 
            { return types.CXX_FLAGS;
            } 
            // fall through
          case 61: break;
          case 23: 
            { return types.EXECUTABLE;
            } 
            // fall through
          case 62: break;
          case 24: 
            { return types.NO_DYNLINK;
            } 
            // fall through
          case 63: break;
          case 25: 
            { return types.PREPROCESS;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return types.JS_OF_OCAML;
            } 
            // fall through
          case 65: break;
          case 27: 
            { return types.PUBLIC_NAME;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return types.VIRTUAL_DEPS;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return types.OCAMLC_FLAGS;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return types.LIBRARY_FLAGS;
            } 
            // fall through
          case 69: break;
          case 31: 
            { return types.VERSION;
            } 
            // fall through
          case 70: break;
          case 32: 
            { return types.OCAMLOPT_FLAGS;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return types.C_LIBRARY_FLAGS;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return types.INSTALL_C_HEADERS;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return types.PREPROCESSOR_DEPS;
            } 
            // fall through
          case 74: break;
          case 36: 
            { return types.PPX_RUNTIME_LIBRARIES;
            } 
            // fall through
          case 75: break;
          case 37: 
            { return types.SELF_BUILD_STUBS_ARCHIVE;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return types.ALLOW_OVERLAPPING_DEPENDENCIES;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return types.MODULES_WITHOUT_IMPLEMENTATION;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
