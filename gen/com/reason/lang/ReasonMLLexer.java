/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.reason.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.reason.lang.RmlTypes.*;
import static com.intellij.psi.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ReasonML.flex</tt>
 */
public class ReasonMLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\104\1\1\1\106\1\3\1\2\22\0\1\104\1\76\1\52\1\74\1\0\1\102\1\55\1\6"+
    "\1\65\1\66\1\54\1\101\1\67\1\27\1\24\1\53\1\11\1\23\2\105\4\20\2\7\1\56\1"+
    "\70\1\62\1\57\1\60\1\75\1\73\1\15\1\22\2\15\1\26\1\15\7\5\1\50\1\17\1\31\2"+
    "\5\1\51\4\5\1\13\2\5\1\63\1\103\1\64\1\100\1\10\1\77\1\35\1\21\1\42\1\37\1"+
    "\25\1\14\1\4\1\47\1\41\2\4\1\36\1\32\1\40\1\16\1\30\1\4\1\44\1\45\1\34\1\33"+
    "\1\4\1\46\1\12\1\43\1\4\1\71\1\61\1\72\7\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\4\1\10\1\4\1\11\10\4\2\5\1\12\1\13"+
    "\1\14\1\2\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\2\1\43\3\42\1\7\1\44\1\0\2\7\1\0"+
    "\6\4\1\45\3\4\1\46\2\4\1\47\2\4\1\50"+
    "\1\51\3\4\2\5\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\1\42\1\0\3\42\1\70\1\71\2\44"+
    "\1\0\3\7\1\72\1\73\12\4\1\74\1\75\2\4"+
    "\1\76\2\4\2\5\1\77\3\0\1\44\1\7\1\4"+
    "\1\100\2\4\1\101\2\4\1\66\1\102\1\103\1\104"+
    "\3\4\1\105\1\106\1\0\1\44\1\107\5\4\1\110"+
    "\1\4\1\111\1\4\1\112\2\4\1\113\1\4\1\114"+
    "\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u0163\0\u027f\0\u02c6\0\u030d\0\u0354\0\u0163"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u0163\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0163\0\u0852\0\u0899\0\u08e0\0\u0163\0\u0927"+
    "\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163"+
    "\0\u0163\0\u0163\0\u0163\0\u096e\0\u0163\0\u0163\0\u09b5\0\u0163"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0163\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0163"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u01f1\0\u0eb3\0\u0efa\0\u01f1\0\u0f41"+
    "\0\u0f88\0\u01f1\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u1179\0\u0163"+
    "\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163\0\u09b5\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u0163\0\u0163\0\u0163\0\u1323"+
    "\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u01f1\0\u01f1\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u01f1\0\u01f1\0\u174c\0\u1793\0\u01f1\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u0163\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u0b18\0\u1a12"+
    "\0\u01f1\0\u1a59\0\u1aa0\0\u01f1\0\u1ae7\0\u1b2e\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u1b75\0\u1bbc\0\u1c03\0\u0238\0\u0238\0\u1c4a"+
    "\0\u0b18\0\u01f1\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u01f1"+
    "\0\u1df4\0\u01f1\0\u1e3b\0\u01f1\0\u1e82\0\u1ec9\0\u01f1\0\u1f10"+
    "\0\u01f1\0\u01f1\0\u01f1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\107\6\110\7\3\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\15\1\11\1\12\1\16\1\12\1\17\1\12\1\14"+
    "\1\11\1\12\1\14\1\20\1\21\1\12\1\22\1\11"+
    "\1\12\1\23\1\24\1\25\1\26\1\27\2\11\1\30"+
    "\2\11\1\31\1\32\2\11\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\7"+
    "\1\10\1\14\1\7\2\66\1\67\1\7\46\66\1\70"+
    "\30\66\1\71\2\66\1\7\2\66\1\67\1\7\47\66"+
    "\1\72\1\73\31\66\1\7\110\0\3\10\100\0\1\10"+
    "\6\0\20\11\1\0\2\11\1\0\22\11\33\0\1\11"+
    "\5\0\20\12\1\0\2\12\1\0\22\12\33\0\1\12"+
    "\5\0\2\74\1\0\3\14\2\74\2\0\2\74\1\14"+
    "\2\0\1\14\1\75\2\76\1\0\5\74\1\0\1\74"+
    "\1\0\2\74\1\0\7\74\33\0\1\14\5\0\2\74"+
    "\1\0\3\14\2\77\2\0\2\100\1\14\2\101\1\14"+
    "\1\75\2\76\1\0\5\74\1\0\1\74\1\0\2\74"+
    "\1\0\7\74\33\0\1\14\5\0\12\11\1\102\5\11"+
    "\1\0\2\11\1\0\3\11\1\103\1\11\1\104\14\11"+
    "\33\0\1\11\5\0\20\11\1\0\2\11\1\0\1\105"+
    "\21\11\33\0\1\11\5\0\6\11\1\106\11\11\1\0"+
    "\2\11\1\0\6\11\1\107\13\11\33\0\1\11\25\0"+
    "\1\110\66\0\12\11\1\111\5\11\1\0\2\11\1\0"+
    "\3\11\1\112\16\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\10\11\1\113\11\11\33\0\1\11\5\0"+
    "\12\11\1\114\5\11\1\0\2\11\1\0\13\11\1\115"+
    "\1\116\5\11\33\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\15\11\1\117\4\11\33\0\1\11\5\0\20\11"+
    "\1\0\1\120\1\11\1\0\11\11\1\121\10\11\33\0"+
    "\1\11\5\0\10\11\1\122\7\11\1\0\2\11\1\0"+
    "\10\11\1\123\11\11\33\0\1\11\5\0\20\11\1\0"+
    "\1\124\1\11\1\0\5\11\1\125\14\11\33\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\16\11\1\126\3\11"+
    "\33\0\1\11\5\0\12\12\1\127\5\12\1\0\2\12"+
    "\1\0\22\12\33\0\1\12\5\0\12\12\1\130\5\12"+
    "\1\0\2\12\1\0\22\12\33\0\1\12\25\0\1\131"+
    "\27\0\1\132\3\0\1\133\52\0\1\134\137\0\1\135"+
    "\107\0\1\136\107\0\1\137\1\140\106\0\1\141\3\0"+
    "\1\142\75\0\1\143\114\0\1\144\113\0\1\145\44\0"+
    "\1\146\63\0\1\66\1\147\104\0\1\66\1\150\1\151"+
    "\1\0\3\66\1\152\1\66\1\152\1\153\3\66\1\154"+
    "\1\66\1\152\2\66\1\152\61\66\1\152\55\0\1\155"+
    "\105\0\1\156\37\0\2\157\1\0\3\75\2\157\2\0"+
    "\2\157\1\75\2\0\1\75\1\0\2\76\1\0\5\157"+
    "\1\0\1\157\1\0\2\157\1\0\7\157\33\0\1\75"+
    "\10\0\1\160\1\0\1\160\6\0\1\160\2\0\1\160"+
    "\3\0\1\161\51\0\1\161\3\0\1\160\10\0\1\162"+
    "\1\0\1\162\2\0\2\162\2\0\4\162\1\0\2\162"+
    "\6\0\1\162\1\0\1\162\2\0\1\162\42\0\1\162"+
    "\12\0\1\163\6\0\1\163\2\0\1\163\61\0\1\163"+
    "\12\0\1\164\11\0\1\164\67\0\20\11\1\0\2\11"+
    "\1\0\14\11\1\165\5\11\33\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\10\11\1\166\11\11\33\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\6\11\1\167\13\11"+
    "\33\0\1\11\5\0\20\11\1\0\1\170\1\11\1\0"+
    "\4\11\1\171\15\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\4\11\1\172\15\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\15\11\1\173\4\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\7\11\1\174"+
    "\12\11\33\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\4\11\1\175\15\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\11\11\1\176\10\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\1\177\21\11\33\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\3\11\1\200\7\11"+
    "\1\201\6\11\33\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\4\11\1\202\15\11\33\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\15\11\1\203\4\11\33\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\12\11\1\204\7\11"+
    "\33\0\1\11\5\0\20\11\1\0\2\11\1\0\12\11"+
    "\1\205\7\11\33\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\11\11\1\206\10\11\33\0\1\11\5\0\20\11"+
    "\1\0\2\11\1\0\11\11\1\207\10\11\33\0\1\11"+
    "\5\0\20\12\1\0\2\12\1\0\10\12\1\210\11\12"+
    "\33\0\1\12\5\0\20\12\1\0\2\12\1\0\2\12"+
    "\1\211\17\12\33\0\1\12\60\0\1\212\133\0\1\150"+
    "\3\0\1\150\1\151\113\0\1\213\1\0\1\213\6\0"+
    "\1\213\2\0\1\213\61\0\1\213\10\0\1\214\1\0"+
    "\1\214\2\0\2\214\2\0\4\214\1\0\2\214\6\0"+
    "\1\214\1\0\1\214\2\0\1\214\42\0\1\214\12\0"+
    "\1\215\11\0\1\215\61\0\1\215\5\0\2\157\1\0"+
    "\3\160\2\157\2\0\2\157\1\160\2\0\1\160\4\0"+
    "\5\157\1\0\1\157\1\0\2\157\1\0\7\157\33\0"+
    "\1\160\10\0\1\160\1\0\1\160\6\0\1\160\2\0"+
    "\1\160\61\0\1\160\5\0\2\74\1\0\3\162\2\74"+
    "\2\162\2\74\4\162\1\216\2\162\1\0\2\217\3\74"+
    "\1\162\1\74\1\162\2\74\1\162\7\74\33\0\1\162"+
    "\5\0\2\74\2\0\2\163\2\74\2\0\2\74\1\163"+
    "\2\0\1\163\4\0\5\74\1\0\1\74\1\0\2\74"+
    "\1\0\7\74\33\0\1\163\5\0\2\74\2\0\2\164"+
    "\2\74\2\0\2\74\3\0\1\164\4\0\5\74\1\0"+
    "\1\74\1\0\2\74\1\0\7\74\41\0\20\11\1\0"+
    "\2\11\1\0\15\11\1\220\4\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\10\11\1\221\11\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\11\11\1\222"+
    "\10\11\33\0\1\11\5\0\20\11\1\0\1\223\1\11"+
    "\1\0\22\11\33\0\1\11\5\0\20\11\1\0\1\224"+
    "\1\11\1\0\22\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\3\11\1\225\16\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\5\11\1\226\14\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\4\11\1\227"+
    "\15\11\33\0\1\11\5\0\20\11\1\0\1\230\1\11"+
    "\1\0\22\11\33\0\1\11\5\0\20\11\1\0\1\231"+
    "\1\11\1\0\22\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\4\11\1\232\15\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\6\11\1\233\13\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\15\11\1\234"+
    "\4\11\33\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\4\11\1\235\15\11\33\0\1\11\5\0\20\12\1\0"+
    "\1\236\1\12\1\0\22\12\33\0\1\12\5\0\20\12"+
    "\1\0\1\237\1\12\1\0\22\12\33\0\1\12\10\0"+
    "\1\66\1\0\1\66\6\0\1\66\2\0\1\66\61\0"+
    "\1\66\10\0\1\66\1\0\1\66\2\0\2\66\2\0"+
    "\4\66\1\0\2\66\6\0\1\66\1\0\1\66\2\0"+
    "\1\66\42\0\1\66\12\0\1\240\6\0\1\240\2\0"+
    "\1\240\61\0\1\240\5\0\2\157\1\0\3\216\2\157"+
    "\2\216\2\157\4\216\1\0\2\216\1\0\2\241\3\157"+
    "\1\216\1\157\1\216\2\157\1\216\7\157\33\0\1\216"+
    "\5\0\20\11\1\0\1\242\1\11\1\0\22\11\33\0"+
    "\1\11\5\0\12\11\1\243\5\11\1\0\2\11\1\0"+
    "\22\11\33\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\14\11\1\244\5\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\6\11\1\245\13\11\33\0\1\11\5\0"+
    "\15\11\1\246\2\11\1\0\2\11\1\0\22\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\3\11\1\247"+
    "\16\11\33\0\1\11\5\0\20\11\1\0\1\250\1\11"+
    "\1\0\22\11\33\0\1\11\5\0\20\11\1\0\2\11"+
    "\1\0\12\11\1\251\7\11\33\0\1\11\12\0\1\66"+
    "\6\0\1\66\2\0\1\66\61\0\1\66\5\0\20\11"+
    "\1\0\2\11\1\0\10\11\1\252\11\11\33\0\1\11"+
    "\5\0\20\11\1\0\2\11\1\0\10\11\1\253\11\11"+
    "\33\0\1\11\5\0\20\11\1\0\1\254\1\11\1\0"+
    "\22\11\33\0\1\11\5\0\20\11\1\0\2\11\1\0"+
    "\6\11\1\255\13\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\7\11\1\256\12\11\33\0\1\11\5\0"+
    "\20\11\1\0\2\11\1\0\17\11\1\257\2\11\33\0"+
    "\1\11\5\0\20\11\1\0\2\11\1\0\5\11\1\260"+
    "\14\11\33\0\1\11\5\0\20\11\1\0\1\261\1\11"+
    "\1\0\22\11\33\0\1\11\5\0\20\11\1\0\1\262"+
    "\1\11\1\0\22\11\33\0\1\11\5\0\20\11\1\0"+
    "\2\11\1\0\6\11\1\263\13\11\33\0\1\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8023];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\1\11\4\1\1\11\14\1\1\11"+
    "\5\1\1\11\3\1\1\11\1\1\13\11\1\1\2\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\0\2\1\1\0"+
    "\6\1\1\11\20\1\6\11\1\1\7\11\1\0\1\1"+
    "\1\0\3\1\3\11\1\1\1\0\30\1\1\11\3\0"+
    "\22\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReasonMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return STRING;
            }
            case 180: break;
            case IN_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return COMMENT;
            }
            case 181: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            }
          case 79: break;
          case 2: 
            { return BAD_CHARACTER;
            }
          case 80: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 81: break;
          case 4: 
            { return LIDENT;
            }
          case 82: break;
          case 5: 
            { return UIDENT;
            }
          case 83: break;
          case 6: 
            { return QUOTE;
            }
          case 84: break;
          case 7: 
            { return INT;
            }
          case 85: break;
          case 8: 
            { return DOT;
            }
          case 86: break;
          case 9: 
            { return MINUS;
            }
          case 87: break;
          case 10: 
            { yybegin(IN_STRING); tokenStart();
            }
          case 88: break;
          case 11: 
            { return SLASH;
            }
          case 89: break;
          case 12: 
            { return STAR;
            }
          case 90: break;
          case 13: 
            { return COLON;
            }
          case 91: break;
          case 14: 
            { return EQ;
            }
          case 92: break;
          case 15: 
            { return GT;
            }
          case 93: break;
          case 16: 
            { return PIPE;
            }
          case 94: break;
          case 17: 
            { return LT;
            }
          case 95: break;
          case 18: 
            { return LBRACKET;
            }
          case 96: break;
          case 19: 
            { return RBRACKET;
            }
          case 97: break;
          case 20: 
            { return LPAREN;
            }
          case 98: break;
          case 21: 
            { return RPAREN;
            }
          case 99: break;
          case 22: 
            { return COMMA;
            }
          case 100: break;
          case 23: 
            { return SEMI;
            }
          case 101: break;
          case 24: 
            { return LBRACE;
            }
          case 102: break;
          case 25: 
            { return RBRACE;
            }
          case 103: break;
          case 26: 
            { return ARROBASE;
            }
          case 104: break;
          case 27: 
            { return SHARP;
            }
          case 105: break;
          case 28: 
            { return QUESTION_MARK;
            }
          case 106: break;
          case 29: 
            { return EXCLAMATION_MARK;
            }
          case 107: break;
          case 30: 
            { return BACKTICK;
            }
          case 108: break;
          case 31: 
            { return CARRET;
            }
          case 109: break;
          case 32: 
            { return PLUS;
            }
          case 110: break;
          case 33: 
            { return PERCENT;
            }
          case 111: break;
          case 34: 
            { 
            }
          case 112: break;
          case 35: 
            { yybegin(INITIAL); tokenEnd(); return STRING;
            }
          case 113: break;
          case 36: 
            { return FLOAT;
            }
          case 114: break;
          case 37: 
            { return MINUSDOT;
            }
          case 115: break;
          case 38: 
            { return TO;
            }
          case 116: break;
          case 39: 
            { return AS;
            }
          case 117: break;
          case 40: 
            { return IF;
            }
          case 118: break;
          case 41: 
            { return IN;
            }
          case 119: break;
          case 42: 
            { return SLASHDOT;
            }
          case 120: break;
          case 43: 
            { yybegin(IN_COMMENT); commentDepth = 1; tokenStart();
            }
          case 121: break;
          case 44: 
            { return AUTO_CLOSE_TAG;
            }
          case 122: break;
          case 45: 
            { return STARDOT;
            }
          case 123: break;
          case 46: 
            { return ANDAND;
            }
          case 124: break;
          case 47: 
            { return SHORTCUT;
            }
          case 125: break;
          case 48: 
            { return EQEQ;
            }
          case 126: break;
          case 49: 
            { return ARROW;
            }
          case 127: break;
          case 50: 
            { return PIPE_FORWARD;
            }
          case 128: break;
          case 51: 
            { return RARRAY;
            }
          case 129: break;
          case 52: 
            { return CLOSE_TAG;
            }
          case 130: break;
          case 53: 
            { return LARRAY;
            }
          case 131: break;
          case 54: 
            { return UNIT;
            }
          case 132: break;
          case 55: 
            { return PLUSDOT;
            }
          case 133: break;
          case 56: 
            { commentDepth += 1;
            }
          case 134: break;
          case 57: 
            { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return COMMENT; }
            }
          case 135: break;
          case 58: 
            { return FOR;
            }
          case 136: break;
          case 59: 
            { return FUN;
            }
          case 137: break;
          case 60: 
            { return TRY;
            }
          case 138: break;
          case 61: 
            { return LET;
            }
          case 139: break;
          case 62: 
            { return REC;
            }
          case 140: break;
          case 63: 
            { return EQEQEQ;
            }
          case 141: break;
          case 64: 
            { return OPEN;
            }
          case 142: break;
          case 65: 
            { return ELSE;
            }
          case 143: break;
          case 66: 
            { return TYPE;
            }
          case 144: break;
          case 67: 
            { return TRUE;
            }
          case 145: break;
          case 68: 
            { return LIST;
            }
          case 146: break;
          case 69: 
            { return NONE;
            }
          case 147: break;
          case 70: 
            { return SOME;
            }
          case 148: break;
          case 71: 
            { return FALSE;
            }
          case 149: break;
          case 72: 
            { return RAISE;
            }
          case 150: break;
          case 73: 
            { return OPTION;
            }
          case 151: break;
          case 74: 
            { return MODULE;
            }
          case 152: break;
          case 75: 
            { return SWITCH;
            }
          case 153: break;
          case 76: 
            { return MUTABLE;
            }
          case 154: break;
          case 77: 
            { return INCLUDE;
            }
          case 155: break;
          case 78: 
            { return EXTERNAL;
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
