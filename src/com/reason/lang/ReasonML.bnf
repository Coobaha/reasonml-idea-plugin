{
  parserClass="com.reason.parser.ReasonMLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ReasonML"
  psiImplClassSuffix="Impl"
  psiPackage="com.reason.psi"
  psiImplPackage="com.reason.psi.impl"

  elementTypeHolderClass="com.reason.psi.ReasonMLTypes"
  elementTypeClass="com.reason.psi.ReasonMLElementType"
  tokenTypeClass="com.reason.psi.ReasonMLTokenType"

  psiImplUtilClass="com.reason.psi.impl.ReasonMLPsiImplUtil"
}

reasonFile ::=
    ( COMMENT | module_statement | include_statement | let_binding | expr_statement | type_statement )*

// ----------
// MODULE
// ----------

module_statement ::=
    MODULE module_name EQUAL LBRACE module_body RBRACE SEMI { methods=[getPresentation] }

module_body ::=
    (  module_statement
    | include_statement
    | type_statement
    | let_binding )*

module_expr ::=  // https://caml.inria.fr/pub/docs/manual-ocaml/modules.html#module-expr
      module_path

include_statement ::=
    INCLUDE module_expr (module_expr)* SEMI

// ----------
// TYPE
// ----------

type_statement ::=
      TYPE short_id type_definition? SEMI {
//        pin=1 recoverWhile=recover_statement
        methods=[getPresentation]
    }

type_definition ::=
    EQUAL LBRACE record_field (COMMA record_field)* RBRACE

// ----------
// expr
// ----------

expr_statement ::=
    expr+ SEMI

expr ::=
      value_path argument
       | LPAREN expr RPAREN

argument ::=
      STRING
    | jsx

// ----------
// JSX
// ----------

jsx ::=
    start_tag tag_property* ( AUTO_CLOSE_TAG | GT jsxContent* end_tag )

start_tag ::=
    LT tag_name

end_tag ::=
    CLOSE_TAG tag_name GT

tag_property ::=
    value_name EQUAL STRING

jsxContent ::=
    value_name

// ----------

record_field ::=
    short_id (COLON short_id)?

let_binding ::=
    LET short_id let_binding_body SEMI {
//        pin=1 recoverWhile=recover_statement
        methods=[getPresentation]
    }

//private recover_statement ::= !(SEMI)

let_binding_body ::=
      EQUAL FUN (fun_arg)* ARROW fun_body
    | EQUAL seq_expr
    | (fun_arg)* ARROW LBRACE? fun_body RBRACE?

fun_arg ::=
      short_id
    | LBRACE short_id RBRACE

fun_body ::=
    (seq_expr)* NONE?

seq_expr ::=
      LIDENT
    | STRING
    | INT
    | FLOAT
    | tuple_expr

tuple_expr ::=
    LPAREN tuple_arg (COMMA tuple_arg)* RPAREN

tuple_arg ::=
    tuple_value (COLON core_type)?

tuple_value ::=
      INT
    | LIDENT

core_type ::=
  LIDENT

short_id ::=
    UIDENT | LIDENT

// ----------
// REFERRING NAMEDÂ OBJECTS
//   https://caml.inria.fr/pub/docs/manual-ocaml/names.html#sec90
// ----------

value_path ::=
    value_name
    | module_path DOT value_name

module_path ::=
    module_name (DOT module_name)*

// ----------
// NAMES
//
// ----------

value_name ::=
    LIDENT

tag_name ::=
    LIDENT | UIDENT
//
//operator_name ::=
//      prefix_symbol
//    | infix_op
//
//prefix_symbol ::=
//
//infix_op ::=
//      infix_symbol
//    | STAR | PLUS

module_name ::=
    UIDENT
