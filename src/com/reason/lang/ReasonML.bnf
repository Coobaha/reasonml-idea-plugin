{
  parserClass="com.reason.parser.ReasonMLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ReasonML"
  psiImplClassSuffix="Impl"
  psiPackage="com.reason.psi"
  psiImplPackage="com.reason.psi.impl"

  elementTypeHolderClass="com.reason.lang.ReasonMLTypes"
  elementTypeClass="com.reason.psi.ReasonMLElementType"
  tokenTypeClass="com.reason.psi.ReasonMLTokenType"

  psiImplUtilClass="com.reason.psi.impl.ReasonMLPsiImplUtil"
  implements("let_statement")="com.reason.psi.ReasonMLInferredType"
}

reasonFile ::=
    ( COMMENT | open_expression | module_statement | include_statement | let_statement | expr_statement | type_statement | external_statement )*

// ----------
// MODULE
// ----------

open_expression ::=
    OPEN module_path SEMI

module_statement ::=
    MODULE module_name EQ (module_path/*alias*/ | LBRACE module_body RBRACE) SEMI { methods=[getPresentation] }

module_body ::=
    (  module_statement
    | external_statement
    | include_statement
    | type_statement
    | let_statement )*

private module_expr ::=  // https://caml.inria.fr/pub/docs/manual-ocaml/modules.html#module-expr
      module_path

include_statement ::=
    INCLUDE module_expr (module_expr)* SEMI

// ----------
// TYPE
//   https://caml.inria.fr/pub/docs/manual-ocaml/types.html#typexpr
// ----------

type_statement ::=
     TYPE type_constr_name (QUOTE LIDENT)? (EQ type_expr)? item_attribute? SEMI {
        methods=[getPresentation]
    }

type_expr ::=  // https://caml.inria.fr/pub/docs/manual-ocaml/types.html#typexpr
    (label_name SHORTCUT)? single_type_expr+ attribute? (ARROW (label_name SHORTCUT)? single_type_expr+ attribute?)*

private single_type_expr ::=
      UNIT
    | OPTION (LPAREN type_expr RPAREN | type_constr)
    | LIST type_constr
    | QUOTE type_constr_name
    | poly_type
    | polymorphic_variant_type
    | tuple_type_decl
    | record_type_decl
    | type_constr (record_type_decl | QUOTE LIDENT | value_path)?

private tuple_type_decl ::=
    LPAREN type_expr (COMMA type_expr)* RPAREN

private record_type_decl ::=
    LBRACE (DOT DOT?)? (field_type_decl (COMMA field_type_decl)*)? RBRACE

field_type_decl ::=
    MUTABLE? field_name (COLON type_expr)?

poly_type ::=
    PIPE UIDENT (PIPE UIDENT)*

polymorphic_variant_type ::=  // https://caml.inria.fr/pub/docs/manual-ocaml/types.html#polymorphic-variant-type
  LBRACKET PIPE tag_spec_first (PIPE tag_spec_first)* RBRACKET

tag_spec_first ::=
    BACKTICK tag_name

type_constr ::=  // https://caml.inria.fr/pub/docs/manual-ocaml/names.html#typeconstr
    (module_path DOT)? type_constr_name

// ----------
// external
//   https://caml.inria.fr/pub/docs/manual-ocaml/modules.html
// ----------

external_statement ::=
    EXTERNAL value_name COLON type_expr EQ external_alias item_attribute* SEMI { methods=[getPresentation] }

external_alias ::=
    STRING

// ----------
// expr
//   https://caml.inria.fr/pub/docs/manual-ocaml/expr.html
// ----------

expr_statement ::=
    sequenced_expr SEMI

private sequenced_expr ::=
    expr (PIPE_FORWARD expr)? (SEMI expr (PIPE_FORWARD expr)?)*

private expr ::=
      NONE
    | SOME expr
    | FUN parameter* ARROW let_binding_body
    | LPAREN sequenced_expr? RPAREN untyped_object?
    | LBRACE (DOT DOT DOT value_name COMMA?)? sequenced_expr RBRACE
    | LBRACKET sequenced_expr RBRACKET
    | IF LPAREN expr RPAREN LBRACE sequenced_expr RBRACE (ELSE (IF LPAREN expr RPAREN)? LBRACE sequenced_expr RBRACE)*
    | SWITCH expr LBRACE pattern_matching+ RBRACE
    | SHORTCUT expr
    | module_path DOT expr
    | jsx
    | let_binding
    | label_name SHORTCUT expr
    | recursive_expr

private recursive_expr ::=
    value_expr (
              expr
            | LPAREN expr RPAREN
            | EQEQEQ expr
            | EQEQ expr
            | EQ expr
            | QUESTION_MARK expr
            | PLUS expr
            | PLUSDOT expr
            | MINUS expr
            | MINUSDOT expr
            | MUL expr
            | MULDOT expr
            | SLASH expr
            | SLASHDOT expr
            | STAR expr
            | STARDOT expr
            | LT expr
            | GT expr
            | CARRET expr
            | COMMA expr
            | COLON expr )*

value_expr ::=
      signed_constant
    | value_path (DOT value_path)* (untyped_object () | argument*)
    | module_path

untyped_object ::=
    SHARP SHARP value_name (SHARP SHARP value_name)*

argument ::=
      SHORTCUT argument_value
    | value_name SHORTCUT argument_value

argument_value ::=
    value_name (untyped_object | DOT field)?

// ----------
// PATTERN
//    https://caml.inria.fr/pub/docs/manual-ocaml/expr.html#pattern-matching
// ----------

pattern_matching ::=
    PIPE pattern ARROW sequenced_expr

pattern ::=
      NONE
    | SOME (constant | value_path)
    | LBRACKET pattern (COMMA pattern)* (COMMA DOT DOT DOT value_path)? RBRACKET
    | BACKTICK tag_name pattern
    | tuple_value
    | value_path
    | module_path
    | constant

// ----------
// JSX
// ----------

jsx ::=
    start_tag tag_property* ( AUTO_CLOSE_TAG | GT jsxContent* end_tag )

start_tag ::=
    LT tag_name

end_tag ::=
    CLOSE_TAG tag_name GT

tag_property ::=
    value_name (EQ (LPAREN expr RPAREN | record_decl | constant | value_name (DOT value_name)*))?

jsxContent ::=
      COMMENT
    | jsx
    | expr

// ----------
// LET
// ----------

let_statement ::=
    let_binding SEMI {
        methods=[getPresentation]
        mixin="com.reason.psi.impl.ReasonMLInferredTypeMixin"
    }

let_binding ::=
    LET REC? let_name (
          (COLON type_expr)? EQ (
              FUN value_name parameter* ARROW let_binding_body
            | FUN pattern_matching+
            | let_binding_body
          )
        | parameter* (COLON type_expr)? ARROW let_binding_body/*scoped_expr*/
    )
    { methods=[isFunction] }

let_name ::=
    tuple_value | LPAREN RPAREN | let_destructuring | value_name

private let_destructuring ::=
    LBRACE field (COMMA field)* RBRACE

private tuple_value ::=
    LPAREN tuple_field (COMMA tuple_field)* RPAREN

private tuple_field ::=
    constant | value_name | SOME value_name | NONE | UNDERSCORE

private let_binding_body ::=
      LBRACE expr (SEMI expr)* RBRACE
    | expr

// https://caml.inria.fr/pub/docs/manual-ocaml/patterns.html#pattern
parameter ::=
      label_name? SHORTCUT LPAREN? value_name (COLON type_expr)? RPAREN? (EQ (constant | QUESTION_MARK))?
    | parameter_expr
    | LPAREN parameter_expr (COLON type_expr)? RPAREN
    | LBRACE field (COMMA field)* RBRACE

parameter_expr ::=
      constant
    | value_name
    | LBRACE field (COMMA field)* RBRACE (AS value_name)?

// https://caml.inria.fr/pub/docs/manual-ocaml/names.html#field
field ::=
    (module_path DOT)? field_name

// ----------
// RECORD / tuple
// ----------

record_decl ::=
    LBRACE field_decl (COMMA field_decl)* RBRACE

field_decl ::=
      DOT DOT DOT field_name
    | field_name COLON expr

// ----------
// CONSTANTS
//   https://caml.inria.fr/pub/docs/manual-ocaml/const.html#constant
// ----------

constant ::=
      INT
    | FLOAT
    | STRING
    | FALSE
    | TRUE
    | UNIT
    | LBRACKET RBRACKET
    | LPAREN RPAREN

signed_constant ::=
    constant
  | MINUS INT
  | MINUS FLOAT
  | PLUS INT
  | PLUS FLOAT

// ----------
// REFERRING NAMEDÂ OBJECTS
//   https://caml.inria.fr/pub/docs/manual-ocaml/names.html#sec90
// ----------

value_path ::=
      value_name
    | module_path DOT value_name

module_path ::=
    module_name (DOT module_name)*

// ----------
// NAMES
// https://caml.inria.fr/pub/docs/manual-ocaml/names.html
// ----------

value_name ::=
    LIDENT

tag_name ::=
    LIDENT | UIDENT

field_name ::=
    STRING | LIDENT

module_name ::=
    UIDENT

type_constr_name ::=
    LIDENT

label_name ::=
    LIDENT

// ----------
// Attributes
//     https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec246
// ----------

attribute ::=
    LBRACKET ARROBASE attribute_id_rec attribute_payload? RBRACKET

item_attribute ::=
    LBRACKET ARROBASE ARROBASE attribute_id_rec attribute_payload? RBRACKET

attribute_id_rec ::=
    attribute_id (DOT attribute_id)*

attribute_id ::=
      MODULE /* bs */
    | LIDENT
    | UIDENT

attribute_payload ::=
      COLON type_expr
    | expr