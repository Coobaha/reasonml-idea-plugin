{
  parserClass="com.reason.parser.ReasonMLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ReasonML"
  psiImplClassSuffix="Impl"
  psiPackage="com.reason.psi"
  psiImplPackage="com.reason.psi.impl"

  elementTypeHolderClass="com.reason.psi.ReasonMLTypes"
  elementTypeClass="com.reason.psi.ReasonMLElementType"
  tokenTypeClass="com.reason.psi.ReasonMLTokenType"

  psiImplUtilClass="com.reason.psi.impl.ReasonMLPsiImplUtil"
}

reasonFile ::=
    ( COMMENT | module_statement | let_binding | fun_call | type_statement )*

module_statement ::=
    MODULE module_ident EQUAL LBRACE module_body RBRACE SEMI { methods=[getPresentation] }

module_ident ::=
    UIDENT

module_body ::=
    (  module_statement
    | include_statement
    | type_statement
    | let_binding )*

include_statement ::=
    INCLUDE long_id SEMI

type_statement ::=
      TYPE short_id type_definition? SEMI {
//        pin=1 recoverWhile=recover_statement
        methods=[getPresentation]
    }

type_definition ::=
    EQUAL LBRACE record_field (COMMA record_field)* RBRACE

record_field ::=
    short_id (COLON short_id)?

fun_call ::=
    fun_name (unit|seq_expr) SEMI

fun_name ::=
    LIDENT

unit ::=
    LPAREN RPAREN

let_binding ::=
    LET short_id let_binding_body SEMI {
//        pin=1 recoverWhile=recover_statement
        methods=[getPresentation]
    }

//private recover_statement ::= !(SEMI)

let_binding_body ::=
    EQUAL fun_binding
  | EQUAL seq_expr

fun_binding ::=
    FUN LPAREN RPAREN ARROW seq_expr

seq_expr ::=
      LIDENT
    | tuple_expr
    | STRING
    | INT
    | FLOAT

tuple_expr ::=
    LPAREN tuple_arg (COMMA tuple_arg)* RPAREN

tuple_arg ::=
    tuple_value (COLON core_type)?

tuple_value ::=
      INT
    | LIDENT

core_type ::=
  LIDENT

short_id ::=
    LIDENT

long_id ::=
    UIDENT (DOT UIDENT)*